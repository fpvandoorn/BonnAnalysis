import Mathlib.Topology.Sequences
import Mathlib.Topology.Defs.Filter
import Mathlib.Topology.Order
import Mathlib.Order.Filter.Basic
import BonnAnalysis.ConvergingSequences
import Mathlib.Geometry.Manifold.Instances.Real
import Mathlib.Topology.UniformSpace.UniformConvergence

import BonnAnalysis.UniformConvergenceSequences
import Mathlib
--import Mathlib.Analysis.InnerProductSpace
-- import Mathlib.Order
-- noncomputable section
--open FourierTransform MeasureTheory Real


namespace MeasureTheory
open MeasureTheory
universe u v
open Order Set Filter
open Filter
open scoped Classical
open NNReal Topology


open scoped Topology
open TopologicalSpace
noncomputable section


variable {V : Type u} (k : Type v)
  [NontriviallyNormedField k] [NormedAddCommGroup V]  [NormedSpace k V] (Œ© : Opens V) --{Œ©isOpen : IsOpen Œ©}
/--
structure HasCompactSupportIn (œÜ : V ‚Üí k)  : Prop where
  hasCmpctSprt :  HasCompactSupport œÜ
  sprtinŒ©  : tsupport œÜ ‚äÜ Œ©
  -/
--Set.EqOn

@[ext] structure ùìì  where
  œÜ : V ‚Üí k
  œÜIsSmooth : ContDiff k ‚ä§ œÜ --‚ä§ œÜ
  œÜHasCmpctSupport :  HasCompactSupport œÜ
  sprtinŒ©  : tsupport œÜ ‚äÜ Œ©

instance  :  CoeFun (ùìì k Œ©) (fun _ => V ‚Üí k) where
  coe œÉ := œÉ.œÜ
instance : Zero (ùìì k Œ© ) where
    zero := ‚ü®
      0 ,
      by apply contDiff_const ,
      by rw [hasCompactSupport_def, Function.support_zero' , closure_empty] ; exact isCompact_empty  ,
      by sorry ‚ü©
instance : Add (ùìì k Œ© ) where
   add := fun œÜ œà => ‚ü®
    œÜ + œà ,
    ContDiff.add œÜ.œÜIsSmooth œà.œÜIsSmooth,
    HasCompactSupport.add œÜ.œÜHasCmpctSupport œà.œÜHasCmpctSupport  , by sorry ‚ü©
instance : Neg (ùìì k Œ© ) where
  neg := fun œÜ =>
    ‚ü® - œÜ , ContDiff.neg œÜ.œÜIsSmooth , by sorry , by sorry ‚ü©
instance : AddCommGroup (ùìì k Œ© ) where
  add_assoc := fun œÜ œà œÑ => by ext x ; apply add_assoc
  zero_add := fun œÜ => by ext x ; apply zero_add
  add_zero := fun œÜ => by ext x ; apply add_zero
  nsmul := nsmulRec
  add_comm := fun œÜ œà => by ext x ; apply add_comm

  zsmul := zsmulRec
  add_left_neg := fun œÜ  => by ext x;apply add_left_neg
  --'neg', 'zsmul', 'add_left_neg'
@[simp] instance : SMul k (ùìì k Œ© ) where
  smul := fun l œÜ => ‚ü® fun x => l * œÜ x ,
    ContDiff.smul  contDiff_const  œÜ.œÜIsSmooth   ,
    HasCompactSupport.mul_left œÜ.œÜHasCmpctSupport   , by sorry ‚ü©
instance : Module k (ùìì k Œ©) where

  one_smul := fun œÜ => by ext x ; exact one_smul k (œÜ x)
  mul_smul := fun l l' œÜ => by ext x ; exact mul_smul l l' (œÜ x)
  smul_zero := fun a => by ext ; exact smul_zero a
  smul_add := fun a œÜ œÜ' => by ext x; exact smul_add a (œÜ x) (œÜ' x)
  add_smul := fun a b œÜ => by ext x; exact add_smul a b (œÜ x)
  zero_smul := fun œÜ => by ext x; exact zero_smul k (œÜ x)
-- theorem tendsto_const_nhds {Œ± : Type u} {Œ≤ : Type v} [TopologicalSpace Œ±] {a : Œ±} {f : Filter Œ≤} :
-- Filter.Tendsto (fun x => a) f (nhds a)
open Uniformity
universe w x
instance : ConvergingSequences (ùìì k Œ©) where
  seq := fun (a , x) =>
    (‚àÉ K : Set V , IsCompact K ‚àß ‚àÄ n , tsupport (a n).œÜ ‚äÜ K) ‚àß
    ‚àÄ l : ‚Ñï , TendstoUniformly
      (fun n => iteratedFDeriv k l (a n).œÜ)
                (iteratedFDeriv k l x.œÜ) atTop
  seq_cnst := fun x => by
    let A : Set (V ) := @tsupport _ _ ‚ü® 0 ‚ü©  _ x.œÜ --- weird
    constructor
    ¬∑ use A
      constructor
      ¬∑ exact x.œÜHasCmpctSupport
      ¬∑ intro n
        exact subset_rfl
    ¬∑ intro l
      rw [‚Üê tendstoUniformlyOn_univ ]

      apply CnstSeqTendstoUniformlyOn
  seq_sub := fun {a} {x} p a' => by
    obtain ‚ü®‚ü® K , ‚ü® hK1 , hK2 ‚ü©  ‚ü© , conv ‚ü©  := p
    constructor
    ¬∑ use K
      constructor
      ¬∑ exact hK1
      ¬∑ intro n
        apply hK2
    ¬∑ intro l
      --let da' : SubSequence (fun n => iteratedFDeriv k l (a n)) :=
      rw [‚Üê tendstoUniformlyOn_univ ]
      exact SubSeqConvergesUniformly ( tendstoUniformlyOn_univ.mpr (conv l)) ‚ü® a'.œÜ , a'.hœÜ ‚ü©


def ùìì' := (ùìì k Œ© ) ‚ÜíL[k] k

instance :  CoeFun (ùìì' k Œ© ) (fun _ => (ùìì k Œ©)  ‚Üí k ) where
  coe œÉ := œÉ.toFun
instance : ConvergingSequences (ùìì' k Œ© ) where
  seq := fun AT => ‚àÄ œÜ : ùìì k Œ© , Tendsto (fun n => (AT.1 n) œÜ ) atTop (ùìù (AT.2 œÜ))
  seq_cnst := fun T œÜ => by apply tendsto_const_nhds
  seq_sub := fun hAT A' œÜ => subSeqConverges (hAT œÜ) ‚ü® _ , A'.hœÜ ‚ü©
lemma diffAt (œÜ : ùìì k Œ©) {x : V} (p : x ‚àà Œ©) : DifferentiableAt k œÜ x := by
            have := ContDiff.differentiable œÜ.œÜIsSmooth (OrderTop.le_top 1)
            apply Differentiable.differentiableAt this
            -- rw [mem_nhds_iff]
            -- use Œ©
            -- exact ‚ü® by exact fun ‚¶Éa‚¶Ñ a ‚Ü¶ trivial , Œ©.isOpen , p ‚ü©

notation  A "¬∞" T => T ‚àòL A
lemma zeroCase {œÜ : ‚Ñï ‚Üí (V ‚Üí k)} {œÜ0 : V ‚Üí k} :
  (TendstoUniformly (fun n ‚Ü¶ iteratedFDeriv k 0 (œÜ n)) (iteratedFDeriv k 0 œÜ0) atTop) ‚Üî
    TendstoUniformly (fun n => (œÜ n) ) (œÜ0) atTop := by

        rw [iteratedFDeriv_zero_eq_comp]
        have myrw : (fun n ‚Ü¶ iteratedFDeriv k 0 (œÜ n)) = fun n ‚Ü¶ (‚áë(continuousMultilinearCurryFin0 k V k).symm ‚àò (œÜ n)) := by
          ext1 n
          rw [iteratedFDeriv_zero_eq_comp]
        rw [myrw]
        constructor
        ¬∑ apply UniformContinuous.comp_tendstoUniformly (g:=‚áë(continuousMultilinearCurryFin0 k V k)) ?_
          apply Isometry.uniformContinuous
          apply LinearIsometryEquiv.isometry
        ¬∑ apply UniformContinuous.comp_tendstoUniformly (g:=‚áë(continuousMultilinearCurryFin0 k V k).symm) ?_
          apply Isometry.uniformContinuous
          apply LinearIsometryEquiv.isometry
lemma seqImpliesConvergence   {œÜ : ‚Ñï ‚Üí (ùìì k Œ© )} {œÜ0 : ùìì k Œ©} (hœÜ : œÜ ‚ü∂ œÜ0) {x : V} :
   Tendsto (fun n => (œÜ n).œÜ x) atTop (ùìù (œÜ0 x)):= by
    apply TendstoUniformly.tendsto_at ;
    apply (zeroCase k).mp
    exact hœÜ.2 0

lemma KcontainsSuppOfLimit {Œ±  : ‚Ñï ‚Üí ùìì k Œ©} {œÜ : ùìì k Œ© } (hœÜ : Œ±  ‚ü∂ œÜ)
  {K : Set V} (hK : IsCompact K ‚àß (‚àÄ n , tsupport (Œ±  n).œÜ ‚äÜ K)) : tsupport œÜ.œÜ ‚äÜ K :=by

  ¬∑ apply closure_minimal ; swap
    ¬∑ exact IsCompact.isClosed hK.1
    ¬∑ apply Set.compl_subset_compl.mp
      intro p hp
      simp

      apply tendsto_nhds_unique (f:= fun n => (Œ± n).œÜ p) (l:=atTop)
      apply seqImpliesConvergence
      exact hœÜ
      have : (fun n => (Œ± n).œÜ p) = (fun n => 0) := by
        ext1 n ;
        have : Function.support (Œ± n).œÜ ‚äÜ K := by
          trans tsupport (Œ± n).œÜ ;
          exact subset_tsupport (Œ± n).œÜ ;
          exact hK.2 n
        exact Function.nmem_support.mp (Set.compl_subset_compl.mpr this hp)
      rw [this]
      apply tendsto_const_nhds















variable (k : Type v) [NontriviallyNormedField k]
  {X : Type w} [ConvergingSequences X] [AddCommMonoid X] [Module k X]
  {M : Type* } [TopologicalSpace M] [AddCommGroup M] [Module k M]

class IsSeqCtsLinearMap (f : X ‚Üí M) where
  isAdd : ‚àÄ x y, f (x + y) = f x + f y -- we write this out because X might not be a normed space
  isMul : ‚àÄ (c : k) (x), f (c ‚Ä¢ x) = c ‚Ä¢ f x
  isSeqCts : SeqContinuous' f
open IsSeqCtsLinearMap

@[simp] def mk  (T : X ‚Üí M) (hT : IsSeqCtsLinearMap k T) : X ‚ÜíL[k] M  := by
  -- (hT2 : IsLinearMap k T) (hT : SeqContinuous' T) := by
  use ‚ü® ‚ü® T ,hT.isAdd ‚ü© , hT.isMul ‚ü©
  apply continuous_of_SeqContinuous  hT.isSeqCts
lemma SeqContinuous'OfContinuous  (T : X ‚ÜíL[k] M) : SeqContinuous' T := by
  constructor
  intro x x0 hx
  apply Continuous.seqContinuous
  exact T.cont
  apply tendsToùìù
  exact hx
