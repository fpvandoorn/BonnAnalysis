import Mathlib.MeasureTheory.Integral.MeanInequalities
import Mathlib.MeasureTheory.Function.L1Space
import Mathlib.Analysis.NormedSpace.Dual
import Mathlib.Analysis.NormedSpace.LinearIsometry
import Mathlib.MeasureTheory.Integral.Bochner

/-! We show that the dual space of `L^p` for `1 ‚â§ p < ‚àû`.

See [Stein-Shakarchi, Functional Analysis, section 1.4] -/
noncomputable section

open Real NNReal ENNReal NormedSpace MeasureTheory

section

variable {Œ± ùïú E E‚ÇÅ E‚ÇÇ E‚ÇÉ : Type*} {m : MeasurableSpace Œ±} {p q : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±} [NontriviallyNormedField ùïú]
  [NormedAddCommGroup E] [NormedSpace ùïú E] [FiniteDimensional ùïú E]
  [NormedAddCommGroup E‚ÇÅ] [NormedSpace ùïú E‚ÇÅ] [FiniteDimensional ùïú E‚ÇÅ]
  [NormedAddCommGroup E‚ÇÇ] [NormedSpace ùïú E‚ÇÇ] [FiniteDimensional ùïú E‚ÇÇ]
  [NormedAddCommGroup E‚ÇÉ] [NormedSpace ùïú E‚ÇÉ] [FiniteDimensional ùïú E‚ÇÉ]
  [MeasurableSpace E] [BorelSpace E]
  [MeasurableSpace E‚ÇÅ] [BorelSpace E‚ÇÅ]
  [MeasurableSpace E‚ÇÇ] [BorelSpace E‚ÇÇ]
  [MeasurableSpace E‚ÇÉ] [BorelSpace E‚ÇÉ]
  (L : E‚ÇÅ ‚ÜíL[ùïú] E‚ÇÇ ‚ÜíL[ùïú] E‚ÇÉ)

namespace ENNReal

/-- Two numbers `p, q : ‚Ñù‚â•0‚àû` are conjugate if `p‚Åª¬π + q‚Åª¬π = 1`.
This does allow for the case where one of them is `‚àû` and the other one is `1`,
in contrast to `NNReal.IsConjExponent`. -/
structure IsConjExponent (p q : ‚Ñù‚â•0‚àû) : Prop where
  inv_add_inv_conj : p‚Åª¬π + q‚Åª¬π = 1

namespace IsConjExponent

lemma symm (hpq : p.IsConjExponent q) : q.IsConjExponent p := ‚ü®by
    rw [add_comm]
    exact hpq.inv_add_inv_conj‚ü©

lemma one_le_left (hpq : p.IsConjExponent q) : 1 ‚â§ p := by
  rw [‚Üê ENNReal.inv_le_one, ‚Üê hpq.inv_add_inv_conj]
  simp only [self_le_add_right]

lemma one_le_right (hpq : p.IsConjExponent q) : 1 ‚â§ q := hpq.symm.one_le_left

lemma one_infty : (1 : ‚Ñù‚â•0‚àû).IsConjExponent ‚àû := ‚ü®by simp‚ü©

lemma infty_one : (‚àû : ‚Ñù‚â•0‚àû).IsConjExponent 1 := ‚ü®by simp‚ü©

lemma one_infty' {hp : p = 1} {hq : q = ‚àû}: p.IsConjExponent q := ‚ü®by simp [hp, hq]‚ü©

lemma infty_one' {hp : p = ‚àû} {hq : q = 1}: p.IsConjExponent q := ‚ü®by simp [hp, hq]‚ü©

lemma left_one_iff_right_infty (hpq : p.IsConjExponent q) : p = 1 ‚Üî q = ‚àû := by
  have := hpq.inv_add_inv_conj
  constructor
  intro hp
  rw [‚Üê add_zero (1 : ‚Ñù‚â•0‚àû), hp, inv_one, AddLECancellable.inj (ENNReal.cancel_of_ne ENNReal.one_ne_top)] at this
  rwa [‚Üê ENNReal.inv_eq_zero]
  intro hq
  simp [hq] at this
  assumption

lemma left_infty_iff_right_one (hpq : p.IsConjExponent q) : p = ‚àû ‚Üî q = 1 := (left_one_iff_right_infty hpq.symm).symm

lemma one_lt_left_iff_right_ne_infty (hpq : p.IsConjExponent q) : 1 < p ‚Üî q ‚â† ‚àû := by
  rw [‚Üê not_iff_not, not_lt, ne_eq, not_not, (left_one_iff_right_infty hpq).symm]
  constructor
  intro hp
  apply LE.le.antisymm hp (one_le_left hpq)
  apply le_of_eq

lemma left_ne_infty_iff_one_lt_right (hpq : p.IsConjExponent q) : p ‚â† ‚àû ‚Üî 1 < q := (one_lt_left_iff_right_ne_infty hpq.symm).symm

/- maybe useful: formulate an induction principle. To show something when `p.IsConjExponent q` then it's sufficient to show it in the following cases:
* you have `p q : ‚Ñù‚â•0` with `p.IsConjExponent q`
* `p = 1` and `q = ‚àû`
* `p = ‚àû` and `q = 1` -/

#check ENNReal

lemma coe_is_conj_exponent {p q : ‚Ñù‚â•0} (hpq : p.IsConjExponent q): (p : ‚Ñù‚â•0‚àû).IsConjExponent q where
  inv_add_inv_conj :=  by
   rw [‚Üê coe_inv, ‚Üê coe_inv, ‚Üê coe_add, hpq.inv_add_inv_conj, coe_one]
   apply NNReal.IsConjExponent.ne_zero hpq.symm
   apply NNReal.IsConjExponent.ne_zero hpq

lemma toNNReal_is_conj_exponent {p q : ‚Ñù‚â•0‚àû} (hp : 1 < p) (hq : 1 < q) (hpq : p.IsConjExponent q): (p.toNNReal).IsConjExponent (q.toNNReal) where
  one_lt := by
    rwa [‚Üê ENNReal.coe_lt_coe, ENNReal.coe_toNNReal ((left_ne_infty_iff_one_lt_right hpq).mpr hq)]
  inv_add_inv_conj := by
    rw [‚Üê ENNReal.coe_inj, coe_add, coe_inv, coe_inv]
    convert hpq.inv_add_inv_conj
    rw [ENNReal.coe_toNNReal ((left_ne_infty_iff_one_lt_right hpq).mpr hq)]
    rw [ENNReal.coe_toNNReal ((one_lt_left_iff_right_ne_infty hpq).mp hp)]
    exact (ENNReal.toNNReal_ne_zero).mpr ‚ü®(zero_lt_one.trans hq).ne', ((one_lt_left_iff_right_ne_infty hpq).mp hp)‚ü©
    exact (ENNReal.toNNReal_ne_zero).mpr ‚ü®(zero_lt_one.trans hp).ne', ((left_ne_infty_iff_one_lt_right hpq).mpr hq)‚ü©

lemma induction
  (f : (p: ENNReal) ‚Üí (q :ENNReal) ‚Üí (p.IsConjExponent q) ‚Üí Prop)
  (h‚ÇÅ : ‚àÄ  p q : ‚Ñù‚â•0, (h : p.IsConjExponent q) ‚Üí f p q (coe_is_conj_exponent h))
  (h‚ÇÇ : f 1 ‚àû one_infty)
  (h‚ÇÉ : f ‚àû 1 infty_one) :
  ‚àÄ p q : ‚Ñù‚â•0‚àû, (h : p.IsConjExponent q) ‚Üí f p q h := by
  intro p q h
  by_cases hq : q = ‚àû
  have hp : p = 1 := (left_one_iff_right_infty h).mpr hq
  simp_rw [hp, hq]
  exact h‚ÇÇ
  by_cases hp : p = ‚àû
  have hq‚ÇÇ : q = 1 := (left_infty_iff_right_one h).mp hp
  simp_rw [hp, hq‚ÇÇ]
  exact h‚ÇÉ
  have := h‚ÇÅ p.toNNReal q.toNNReal <| toNNReal_is_conj_exponent ((one_lt_left_iff_right_ne_infty h).mpr hq) ((left_ne_infty_iff_one_lt_right h).mp hp) h
  simp_rw [ENNReal.coe_toNNReal hp, ENNReal.coe_toNNReal hq] at this
  exact this

/- add various other needed lemmas below (maybe look at `NNReal.IsConjExponent` for guidance) -/

/- Versions of H√∂lder's inequality.
Note that the hard case already exists as `ENNReal.lintegral_mul_le_Lp_mul_Lq`. -/
#check ENNReal.lintegral_mul_le_Lp_mul_Lq
#check ContinuousLinearMap.le_opNorm

lemma bilin_le_opNorm  {L : E‚ÇÅ ‚ÜíL[ùïú] E‚ÇÇ ‚ÜíL[ùïú] E‚ÇÉ} {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ} (a : Œ±) : ‚ÄñL (f a) (g a)‚Äñ ‚â§ ‚ÄñL‚Äñ * ‚Äñf a‚Äñ * ‚Äñg a‚Äñ := by
  apply LE.le.trans (ContinuousLinearMap.le_opNorm (L (f a)) (g a))
  apply mul_le_mul_of_nonneg_right (ContinuousLinearMap.le_opNorm L (f a)) (norm_nonneg (g a))

lemma bilin_le_opNorm_nnreal {L : E‚ÇÅ ‚ÜíL[ùïú] E‚ÇÇ ‚ÜíL[ùïú] E‚ÇÉ} {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ} (a : Œ±) : ‚ÄñL (f a) (g a)‚Äñ‚Çä ‚â§ ‚ÄñL‚Äñ‚Çä * (‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä) := by
  rw [‚Üê mul_assoc, ‚Üê NNReal.coe_le_coe]
  simp only [coe_nnnorm, NNReal.coe_mul]
  apply bilin_le_opNorm

lemma lintegral_mul_le_one_infty (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : AEMeasurable f Œº) : ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº ‚â§ snorm f 1 Œº * snorm g ‚ä§ Œº := by
    calc ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª (a : Œ±), ‚Äñf a‚Äñ‚Çä * snormEssSup g Œº ‚àÇŒº := MeasureTheory.lintegral_mono_ae (h := by
        rw [Filter.eventually_iff, ‚Üê Filter.exists_mem_subset_iff]
        use {a | ‚Üë‚Äñg a‚Äñ‚Çä ‚â§ snormEssSup g Œº}
        rw [‚Üê Filter.eventually_iff]
        exact ‚ü®ae_le_snormEssSup, by simp; intro _ ha; apply ENNReal.mul_left_mono ha‚ü©)
    _ = snorm f 1 Œº * snorm g ‚ä§ Œº := by
      rw [lintegral_mul_const'']
      simp [snorm, snorm']
      exact Measurable.comp_aemeasurable' measurable_coe_nnreal_ennreal (Measurable.comp_aemeasurable' measurable_nnnorm hf)

theorem lintegral_mul_le (hpq : p.IsConjExponent q) (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : AEMeasurable f Œº) (hg : AEMeasurable g Œº) :
    ‚à´‚Åª a, ‚ÄñL (f a) (g a)‚Äñ‚Çä ‚àÇŒº ‚â§ ‚ÄñL‚Äñ‚Çä * snorm f p Œº * snorm g q Œº := by
  induction p, q, hpq using IsConjExponent.induction
  case h‚ÇÅ p q hpq =>
    calc ‚à´‚Åª a, ‚ÄñL (f a) (g a)‚Äñ‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª a, ‚ÄñL‚Äñ‚Çä * (‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä) ‚àÇŒº :=
      lintegral_mono_nnreal bilin_le_opNorm_nnreal
    _ = ‚ÄñL‚Äñ‚Çä * ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº := lintegral_const_mul' _ _ coe_ne_top
    _ = ‚ÄñL‚Äñ‚Çä * ‚à´‚Åª a, ((fun a ‚Ü¶ ‚Äñf a‚Äñ‚Çä) * (fun a ‚Ü¶ ‚Äñg a‚Äñ‚Çä)) a ‚àÇŒº := by
      apply congrArg (HMul.hMul _)
      apply lintegral_congr
      simp only [Pi.mul_apply, coe_mul, implies_true]
    _ ‚â§ ‚ÄñL‚Äñ‚Çä * snorm f p Œº * snorm g q Œº := by
      rw [mul_assoc]
      by_cases hL : ‚ÄñL‚Äñ‚Çä = 0
      simp [hL]
      apply (ENNReal.mul_le_mul_left _ coe_ne_top).mpr
      simp only [coe_mul, snorm, coe_eq_zero, coe_ne_top, ‚ÜìreduceIte, coe_toReal, mul_ite, mul_zero, ite_mul, zero_mul, NNReal.IsConjExponent.ne_zero hpq, NNReal.IsConjExponent.ne_zero hpq.symm, snorm']
      apply ENNReal.lintegral_mul_le_Lp_mul_Lq
      apply NNReal.isConjExponent_coe.mpr hpq
      . apply Measurable.comp_aemeasurable' measurable_coe_nnreal_ennreal (Measurable.comp_aemeasurable' measurable_nnnorm hf)
      . apply Measurable.comp_aemeasurable' measurable_coe_nnreal_ennreal (Measurable.comp_aemeasurable' measurable_nnnorm hg)
      simpa [ne_eq, coe_zero]
  case h‚ÇÇ =>
    calc ‚à´‚Åª a, ‚ÄñL (f a) (g a)‚Äñ‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª a, ‚ÄñL‚Äñ‚Çä * (‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä) ‚àÇŒº :=
      lintegral_mono_nnreal bilin_le_opNorm_nnreal
    _ = ‚ÄñL‚Äñ‚Çä * ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº := lintegral_const_mul' _ _ coe_ne_top
    _ ‚â§ ‚ÄñL‚Äñ‚Çä * snorm f 1 Œº * snorm g ‚ä§ Œº := by
      rw [mul_assoc]
      apply ENNReal.mul_left_mono
      apply lintegral_mul_le_one_infty
      exact hf
  case h‚ÇÉ =>
    calc ‚à´‚Åª a, ‚ÄñL (f a) (g a)‚Äñ‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª a, ‚ÄñL‚Äñ‚Çä * (‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä) ‚àÇŒº :=
      lintegral_mono_nnreal bilin_le_opNorm_nnreal
    _ = ‚ÄñL‚Äñ‚Çä * ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº := lintegral_const_mul' _ _ coe_ne_top
    _ = ‚ÄñL‚Äñ‚Çä * ‚à´‚Åª a, ‚Äñg a‚Äñ‚Çä * ‚Äñf a‚Äñ‚Çä ‚àÇŒº := by simp_rw [mul_comm]
    _ ‚â§ ‚ÄñL‚Äñ‚Çä * snorm f ‚ä§ Œº * snorm g 1 Œº := by
      rw [mul_assoc, mul_comm (snorm f ‚ä§ Œº)]
      apply ENNReal.mul_left_mono
      apply lintegral_mul_le_one_infty
      exact hg

-- (hpq : p.IsConjExponent q) is missing
theorem integrable_bilin (hpq : p.IsConjExponent q) (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g q Œº) :
    Integrable (fun a ‚Ü¶ L (f a) (g a)) Œº := by
      dsimp [Integrable]
      constructor
      . apply ContinuousLinearMap.aestronglyMeasurable_comp‚ÇÇ
        apply (MeasureTheory.Mem‚Ñíp.aestronglyMeasurable hf)
        apply (MeasureTheory.Mem‚Ñíp.aestronglyMeasurable hg)
      . dsimp [HasFiniteIntegral]
        apply lt_of_le_of_lt <| lintegral_mul_le L hpq Œº (MeasureTheory.AEStronglyMeasurable.aemeasurable (MeasureTheory.Mem‚Ñíp.aestronglyMeasurable hf)) (MeasureTheory.AEStronglyMeasurable.aemeasurable (MeasureTheory.Mem‚Ñíp.aestronglyMeasurable hg))
        apply ENNReal.mul_lt_top (ENNReal.mul_ne_top coe_ne_top (MeasureTheory.Mem‚Ñíp.snorm_ne_top hf)) (MeasureTheory.Mem‚Ñíp.snorm_ne_top hg)

end IsConjExponent
end ENNReal

end

section

namespace MeasureTheory
namespace Lp

variable {Œ± E E‚ÇÅ E‚ÇÇ E‚ÇÉ : Type*} {m : MeasurableSpace Œ±} {p q : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±}
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [NormedAddCommGroup E‚ÇÅ] [NormedSpace ‚Ñù E‚ÇÅ] [FiniteDimensional ‚Ñù E‚ÇÅ]
  [NormedAddCommGroup E‚ÇÇ] [NormedSpace ‚Ñù E‚ÇÇ] [FiniteDimensional ‚Ñù E‚ÇÇ]
  [NormedAddCommGroup E‚ÇÉ] [NormedSpace ‚Ñù  E‚ÇÉ] [FiniteDimensional ‚Ñù  E‚ÇÉ]
  [MeasurableSpace E] [BorelSpace E]
  [MeasurableSpace E‚ÇÅ] [BorelSpace E‚ÇÅ]
  [MeasurableSpace E‚ÇÇ] [BorelSpace E‚ÇÇ]
  [MeasurableSpace E‚ÇÉ] [BorelSpace E‚ÇÉ]
  (L : E‚ÇÅ ‚ÜíL[‚Ñù] E‚ÇÇ ‚ÜíL[‚Ñù] E‚ÇÉ)

variable
  [hpq : Fact (p.IsConjExponent q)] [h'p : Fact (p < ‚àû)]
  [hp : Fact (1 ‚â§ p)] [hq : Fact (1 ‚â§ q)] -- note: these are superfluous, but it's tricky to make them instances.


/- The map sending `g` to `f ‚Ü¶ ‚à´ x, L (g x) (f x) ‚àÇŒº` induces a map on `L^q` into
`Lp E‚ÇÇ p Œº ‚ÜíL[‚Ñù] E‚ÇÉ`. Generally we will take `E‚ÇÉ = ‚Ñù`. -/
variable (p Œº) in
def toDual (g : Lp E‚ÇÅ q Œº) : Lp E‚ÇÇ p Œº ‚ÜíL[‚Ñù] E‚ÇÉ := by{
  let F : Lp E‚ÇÇ p Œº ‚Üí E‚ÇÉ := fun f ‚Ü¶ ‚à´ x, L (g x) (f x) ‚àÇŒº
  have : IsBoundedLinearMap ‚Ñù F := by{
    exact {
      map_add := by{
        intro f‚ÇÅ f‚ÇÇ
        simp[F]
        rw[‚Üê integral_add]
        ¬∑ apply integral_congr_ae
          filter_upwards [coeFn_add f‚ÇÅ f‚ÇÇ] with a ha
          norm_cast
          rw[ha]
          simp
        ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g) (Lp.mem‚Ñíp f‚ÇÅ)
        ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g) (Lp.mem‚Ñíp f‚ÇÇ)
        }

      map_smul := by{
        intro m f
        simp[F]
        rw[‚Üê integral_smul]
        apply integral_congr_ae
        filter_upwards [coeFn_smul m f] with a ha
        rw[ha]
        simp
        }

      bound := by{
        use (snorm (‚Üë‚Üëg) q Œº).toReal
        constructor
        ¬∑ sorry
        ¬∑ intro f
          simp[F]
          -- Bound norm of integral with integral of norm and apply H√∂lder inequality
          sorry
      }
    }
  }
  apply IsBoundedLinearMap.toContinuousLinearMap this
}


/- The map sending `g` to `f ‚Ü¶ ‚à´ x, L (f x) (g x) ‚àÇŒº` is a linear isometry. -/
variable (p q Œº) in
def toDual‚Çó·µ¢ : Lp E‚ÇÅ q Œº ‚Üí‚Çó·µ¢[‚Ñù] Lp E‚ÇÇ p Œº ‚ÜíL[‚Ñù] E‚ÇÉ where
  toFun := toDual _ _ L
  map_add':= by{
    intro g‚ÇÅ g‚ÇÇ
    simp[toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap]
    ext f
    simp
    rw[‚Üê integral_add]
    ¬∑ apply integral_congr_ae
      filter_upwards [coeFn_add g‚ÇÅ g‚ÇÇ] with a ha
      norm_cast
      rw[ha]
      simp
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÅ) (Lp.mem‚Ñíp f)
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÇ) (Lp.mem‚Ñíp f)
  }
  map_smul':= by{
    intro m g
    simp[toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap]
    ext f
    simp
    rw[‚Üê integral_smul]
    apply integral_congr_ae
    filter_upwards [coeFn_smul m g] with a ha
    rw[ha]
    simp
  }
  norm_map' := by {
    sorry
  }

/- The map sending `g` to `f ‚Ü¶ ‚à´ x, L (f x) (g x) ‚àÇŒº` is a linear isometric equivalence.  -/
variable (p q Œº) in
def dualIsometry (L : E‚ÇÅ ‚ÜíL[‚Ñù] Dual ‚Ñù E‚ÇÇ) :
    Dual ‚Ñù (Lp E‚ÇÇ p Œº) ‚âÉ‚Çó·µ¢[‚Ñù] Lp E q Œº :=
  sorry

end Lp
end MeasureTheory

end
