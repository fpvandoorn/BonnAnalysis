import Mathlib.MeasureTheory.Integral.MeanInequalities
import Mathlib.MeasureTheory.Function.L1Space
import Mathlib.MeasureTheory.Function.LpSpace
import Mathlib.Analysis.SpecialFunctions.Pow.Continuity
import Mathlib.Analysis.NormedSpace.Dual
import Mathlib.Analysis.NormedSpace.LinearIsometry
import Mathlib.MeasureTheory.Integral.Bochner
import Mathlib.Data.Real.Sign
import Mathlib.Tactic.FunProp.Measurable

/-! We show that the dual space of `L^p` for `1 ‚â§ p < ‚àû`.

See [Stein-Shakarchi, Functional Analysis, section 1.4] -/
noncomputable section

open Real NNReal ENNReal NormedSpace MeasureTheory
section

variable {Œ± ùïú E E‚ÇÅ E‚ÇÇ E‚ÇÉ : Type*} {m : MeasurableSpace Œ±} {p p' q q' : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±} [NontriviallyNormedField ùïú]
  [NormedAddCommGroup E] [NormedSpace ùïú E] [FiniteDimensional ùïú E]
  [NormedAddCommGroup E‚ÇÅ] [NormedSpace ùïú E‚ÇÅ] [FiniteDimensional ùïú E‚ÇÅ]
  [NormedAddCommGroup E‚ÇÇ] [NormedSpace ùïú E‚ÇÇ] [FiniteDimensional ùïú E‚ÇÇ]
  [NormedAddCommGroup E‚ÇÉ] [NormedSpace ùïú E‚ÇÉ] [FiniteDimensional ùïú E‚ÇÉ]
  [MeasurableSpace E] [BorelSpace E]
  [MeasurableSpace E‚ÇÅ] [BorelSpace E‚ÇÅ]
  [MeasurableSpace E‚ÇÇ] [BorelSpace E‚ÇÇ]
  [MeasurableSpace E‚ÇÉ] [BorelSpace E‚ÇÉ]
  (L : E‚ÇÅ ‚ÜíL[ùïú] E‚ÇÇ ‚ÜíL[ùïú] E‚ÇÉ)

namespace ENNReal

/-- Two numbers `p, q : ‚Ñù‚â•0‚àû` are conjugate if `p‚Åª¬π + q‚Åª¬π = 1`.
This does allow for the case where one of them is `‚àû` and the other one is `1`,
in contrast to `NNReal.IsConjExponent`. -/
@[mk_iff]
structure IsConjExponent (p q : ‚Ñù‚â•0‚àû) : Prop where
  inv_add_inv_conj : p‚Åª¬π + q‚Åª¬π = 1

namespace IsConjExponent

lemma symm (hpq : p.IsConjExponent q) : q.IsConjExponent p := by
  rw [isConjExponent_iff, add_comm, hpq.inv_add_inv_conj]

lemma one_le_left (hpq : p.IsConjExponent q) : 1 ‚â§ p := by
  simp_rw [‚Üê ENNReal.inv_le_one, ‚Üê hpq.inv_add_inv_conj, self_le_add_right]

lemma one_le_right (hpq : p.IsConjExponent q) : 1 ‚â§ q := hpq.symm.one_le_left

lemma left_ne_zero (hpq : p.IsConjExponent q) : p ‚â† 0 := zero_lt_one.trans_le hpq.one_le_left |>.ne'

lemma right_ne_zero (hpq : p.IsConjExponent q) : q ‚â† 0 :=
  hpq.symm.left_ne_zero

lemma left_inv_ne_top (hpq : p.IsConjExponent q) : p‚Åª¬π ‚â† ‚àû := by
  rw [inv_ne_top]
  exact hpq.left_ne_zero

lemma right_inv_ne_top (hpq : p.IsConjExponent q) : q‚Åª¬π ‚â† ‚àû := hpq.symm.left_inv_ne_top

lemma left_eq (hpq : p.IsConjExponent q) : p = (1 - q‚Åª¬π)‚Åª¬π := by
  rw [‚Üê inv_eq_iff_eq_inv]
  exact (ENNReal.cancel_of_ne hpq.right_inv_ne_top).eq_tsub_of_add_eq hpq.inv_add_inv_conj

lemma right_eq (hpq : p.IsConjExponent q) : q = (1 - p‚Åª¬π)‚Åª¬π := hpq.symm.left_eq

lemma inj_right (hpq : p.IsConjExponent q) (hpq' : p.IsConjExponent q') : q = q' := by
  rw [hpq.right_eq, hpq'.right_eq]

lemma inj_left (hpq : p.IsConjExponent q) (hpq' : p'.IsConjExponent q) : p = p' :=
  hpq.symm.inj_right hpq'.symm

lemma left_eq_left_iff_right_eq_right (hpq : p.IsConjExponent q) (hpq' : p'.IsConjExponent q') :
    p = p' ‚Üî q = q' := by
  constructor <;> rintro rfl <;> [apply inj_right; apply inj_left] <;> assumption

lemma one_top : (1 : ‚Ñù‚â•0‚àû).IsConjExponent ‚àû := ‚ü®by simp‚ü©

lemma top_one : (‚àû : ‚Ñù‚â•0‚àû).IsConjExponent 1 := ‚ü®by simp‚ü©

lemma left_eq_one_iff (hpq : p.IsConjExponent q) : p = 1 ‚Üî q = ‚àû :=
  hpq.left_eq_left_iff_right_eq_right .one_top

lemma left_eq_top_iff (hpq : p.IsConjExponent q) : p = ‚àû ‚Üî q = 1 :=
  (left_eq_one_iff hpq.symm).symm

lemma one_lt_left_iff (hpq : p.IsConjExponent q) : 1 < p ‚Üî q ‚â† ‚àû := by
  rw [‚Üê not_iff_not, not_lt, ne_eq, not_not, hpq.one_le_left.le_iff_eq, hpq.left_eq_one_iff]

lemma left_ne_top_iff (hpq : p.IsConjExponent q) : p ‚â† ‚àû ‚Üî 1 < q :=
  (one_lt_left_iff hpq.symm).symm

lemma _root_.NNReal.IsConjExponent.coe_ennreal {p q : ‚Ñù‚â•0} (hpq : p.IsConjExponent q) :
    (p : ‚Ñù‚â•0‚àû).IsConjExponent q where
  inv_add_inv_conj := by
    have := hpq.symm.ne_zero
    have := hpq.ne_zero
    rw_mod_cast [hpq.inv_add_inv_conj]

lemma toNNReal {p q : ‚Ñù‚â•0‚àû} (hp : p ‚â† ‚àû) (hq : q ‚â† ‚àû) (hpq : p.IsConjExponent q) :
    p.toNNReal.IsConjExponent q.toNNReal where
  one_lt := by
    rwa [‚Üê coe_lt_coe, coe_toNNReal hp, coe_one, hpq.one_lt_left_iff]
  inv_add_inv_conj := by
    rw [‚Üê coe_inj, coe_add, coe_inv, coe_inv, coe_one, coe_toNNReal hp, coe_toNNReal hq,
      hpq.inv_add_inv_conj]
    ¬∑ exact (toNNReal_ne_zero).mpr ‚ü®hpq.right_ne_zero, hq‚ü©
    ¬∑ exact (toNNReal_ne_zero).mpr ‚ü®hpq.left_ne_zero, hp‚ü©

lemma mul_eq_add (hpq : p.IsConjExponent q) : p * q = p + q := by
  induction p using recTopCoe
  . simp [hpq.right_ne_zero]
  induction q using recTopCoe
  . simp [hpq.left_ne_zero]
  norm_cast
  exact hpq.toNNReal coe_ne_top coe_ne_top |>.mul_eq_add

lemma induction
    (P : (p q : ‚Ñù‚â•0‚àû) ‚Üí (p.IsConjExponent q) ‚Üí Prop)
    (nnreal : ‚àÄ ‚¶Ép q : ‚Ñù‚â•0‚¶Ñ, (h : p.IsConjExponent q) ‚Üí P p q h.coe_ennreal)
    (one : P 1 ‚àû one_top) (infty : P ‚àû 1 top_one) {p q : ‚Ñù‚â•0‚àû} (h : p.IsConjExponent q) :
    P p q h := by
  induction p using recTopCoe
  . simp_rw [h.left_eq_top_iff.mp rfl, infty]
  induction q using recTopCoe
  . simp_rw [h.left_eq_one_iff.mpr rfl, one]
  exact nnreal <| h.toNNReal coe_ne_top coe_ne_top

lemma induction_symm
    (P : (p q : ‚Ñù‚â•0‚àû) ‚Üí (p.IsConjExponent q) ‚Üí Prop)
    (nnreal : ‚àÄ ‚¶Ép q : ‚Ñù‚â•0‚¶Ñ, (h : p.IsConjExponent q) ‚Üí p ‚â§ q ‚Üí P p q h.coe_ennreal)
    (one : P 1 ‚àû one_top)
    (symm : ‚àÄ ‚¶Ép q : ‚Ñù‚â•0‚àû‚¶Ñ, (h : p.IsConjExponent q) ‚Üí P p q h ‚Üí P q p h.symm)
    {p q : ‚Ñù‚â•0‚àû} (h : p.IsConjExponent q) : P p q h := by
  induction h using IsConjExponent.induction
  case nnreal p q h =>
    rcases le_total p q with hpq|hqp
    ¬∑ exact nnreal h hpq
    ¬∑ exact symm h.coe_ennreal.symm (nnreal h.symm hqp)
  case one => exact one
  case infty => exact symm .one_top one

/- Versions of H√∂lder's inequality.
Note that the hard case already exists as `ENNReal.lintegral_mul_le_Lp_mul_Lq`. -/

lemma _root_.ContinuousLinearMap.le_opNNNorm‚ÇÇ (L : E‚ÇÅ ‚ÜíL[ùïú] E‚ÇÇ ‚ÜíL[ùïú] E‚ÇÉ) (x : E‚ÇÅ) (y : E‚ÇÇ) :
    ‚ÄñL x y‚Äñ‚Çä ‚â§ ‚ÄñL‚Äñ‚Çä * ‚Äñx‚Äñ‚Çä * ‚Äñy‚Äñ‚Çä := L.le_opNorm‚ÇÇ x y

lemma _root_.ENNReal.lintegral_mul_le_one_top (Œº : Measure Œ±) {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : AEMeasurable f Œº) :
  ‚à´‚Åª (a : Œ±), (f * g) a ‚àÇŒº ‚â§ (‚à´‚Åª (a : Œ±), f a ‚àÇŒº) * (essSup g Œº) := by
    calc ‚à´‚Åª (a : Œ±), (f * g) a ‚àÇŒº = ‚à´‚Åª (a : Œ±), (f * g) a ‚àÇŒº := rfl
    _ ‚â§ ‚à´‚Åª (a : Œ±), f a * (essSup g Œº) ‚àÇŒº := by
      apply MeasureTheory.lintegral_mono_ae
      rw [Filter.eventually_iff, ‚Üê Filter.exists_mem_subset_iff]
      use {a | g a ‚â§ essSup g Œº}
      rw [‚Üê Filter.eventually_iff]
      exact ‚ü®ae_le_essSup _, by simp; intro _ ha; apply ENNReal.mul_left_mono ha‚ü©
    _ = (‚à´‚Åª (a : Œ±), f a ‚àÇŒº) * (essSup g Œº) := by
      rw [lintegral_mul_const'' _ hf]

lemma _root_.ENNReal.lintegral_norm_mul_le_one_top (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : AEMeasurable f Œº) : ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº ‚â§ snorm f 1 Œº * snorm g ‚ä§ Œº := by
      simp [snorm, snorm', snormEssSup]
      apply lintegral_mul_le_one_top _ hf.ennnorm

theorem lintegral_mul_le (hpq : p.IsConjExponent q) (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : AEMeasurable f Œº) (hg : AEMeasurable g Œº) :
    ‚à´‚Åª a, ‚ÄñL (f a) (g a)‚Äñ‚Çä ‚àÇŒº ‚â§ ‚ÄñL‚Äñ‚Çä * snorm f p Œº * snorm g q Œº := by
  calc ‚à´‚Åª a, ‚ÄñL (f a) (g a)‚Äñ‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª a, ‚ÄñL‚Äñ‚Çä * (‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä) ‚àÇŒº := by
        simp_rw [‚Üê mul_assoc]; exact lintegral_mono_nnreal fun a ‚Ü¶ L.le_opNNNorm‚ÇÇ (f a) (g a)
    _ = ‚ÄñL‚Äñ‚Çä * ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº := lintegral_const_mul' _ _ coe_ne_top
    _ ‚â§ ‚ÄñL‚Äñ‚Çä * (snorm f p Œº * snorm g q Œº) := ?_
    _ = ‚ÄñL‚Äñ‚Çä * snorm f p Œº * snorm g q Œº := by rw [mul_assoc]
  gcongr
  induction hpq using IsConjExponent.induction
  case nnreal p q hpq =>
    calc
      ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº = ‚à´‚Åª a, ((‚Äñf ¬∑‚Äñ‚Çä) * (‚Äñg ¬∑‚Äñ‚Çä)) a ‚àÇŒº := by
        apply lintegral_congr
        simp only [Pi.mul_apply, coe_mul, implies_true]
      _ ‚â§ snorm f p Œº * snorm g q Œº := by
        simp only [coe_mul, snorm, coe_eq_zero, coe_ne_top, ‚ÜìreduceIte, coe_toReal, mul_ite, mul_zero, ite_mul, zero_mul, hpq.ne_zero, hpq.symm.ne_zero, snorm']
        apply ENNReal.lintegral_mul_le_Lp_mul_Lq _ (NNReal.isConjExponent_coe.mpr hpq)
        . apply hf.ennnorm
        . apply hg.ennnorm
  case one => exact lintegral_norm_mul_le_one_top _ hf
  case infty =>
    calc
      ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº = ‚à´‚Åª a, ‚Äñg a‚Äñ‚Çä * ‚Äñf a‚Äñ‚Çä ‚àÇŒº := by simp_rw [mul_comm]
    _ ‚â§ snorm f ‚ä§ Œº * snorm g 1 Œº := by rw [mul_comm]; exact lintegral_norm_mul_le_one_top _ hg

theorem integrable_bilin (hpq : p.IsConjExponent q) (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g q Œº) :
    Integrable (fun a ‚Ü¶ L (f a) (g a)) Œº := by
  use L.aestronglyMeasurable_comp‚ÇÇ hf.aestronglyMeasurable hg.aestronglyMeasurable
  apply lintegral_mul_le L hpq Œº hf.aestronglyMeasurable.aemeasurable
    hg.aestronglyMeasurable.aemeasurable |>.trans_lt
  exact ENNReal.mul_lt_top (ENNReal.mul_ne_top coe_ne_top hf.snorm_ne_top) hg.snorm_ne_top

end IsConjExponent
end ENNReal

end

section
namespace MeasureTheory
namespace Lp

variable {Œ± E E‚ÇÅ E‚ÇÇ E‚ÇÉ : Type*} {m : MeasurableSpace Œ±} {p q : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±}
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [NormedAddCommGroup E‚ÇÅ] [NormedSpace ‚Ñù E‚ÇÅ] [FiniteDimensional ‚Ñù E‚ÇÅ]
  [NormedAddCommGroup E‚ÇÇ] [NormedSpace ‚Ñù E‚ÇÇ] [FiniteDimensional ‚Ñù E‚ÇÇ]
  [NormedAddCommGroup E‚ÇÉ] [NormedSpace ‚Ñù  E‚ÇÉ] [FiniteDimensional ‚Ñù  E‚ÇÉ]
  [MeasurableSpace E] [BorelSpace E]
  [MeasurableSpace E‚ÇÅ] [BorelSpace E‚ÇÅ]
  [MeasurableSpace E‚ÇÇ] [BorelSpace E‚ÇÇ]
  [MeasurableSpace E‚ÇÉ] [BorelSpace E‚ÇÉ]
  (L : E‚ÇÅ ‚ÜíL[‚Ñù] E‚ÇÇ ‚ÜíL[‚Ñù] E‚ÇÉ)

variable
  [hpq : Fact (p.IsConjExponent q)] [h'p : Fact (p < ‚àû)]
  [hp : Fact (1 ‚â§ p)] [hq : Fact (1 ‚â§ q)] -- note: these are superfluous, but it's tricky to make them instances.

lemma hp‚ÇÄ : p ‚â† 0 := by have := by calc 0 < 1 := by norm_num
                                        _ ‚â§ p := hp.out
                        exact ne_zero_of_lt this
lemma hp·µ¢ : p ‚â† ‚àû := by exact lt_top_iff_ne_top.mp h'p.out
lemma hq‚ÇÄ : q ‚â† 0 := by have := by calc 0 < 1 := by norm_num
                                        _ ‚â§ q := hq.out
                        exact ne_zero_of_lt this
lemma hq‚ÇÄ' : ¬¨ q = 0 := hq‚ÇÄ

lemma is_conj_exponent : p + q = p*q := hpq.out.mul_eq_add.symm

lemma is_conj_exponent' (hq·µ¢ : q ‚â† ‚àû) : p.toReal + q.toReal = p.toReal*q.toReal := by
  rw [‚Üê toReal_add hp·µ¢ hq·µ¢]
  rw [‚Üê toReal_mul]
  congr
  exact is_conj_exponent

open ENNReal.IsConjExponent
open ContinuousLinearMap
open Mem‚Ñíp

section BasicFunctions

def step' : ‚Ñù ‚Üí ‚Ñù := Set.piecewise {x | x ‚â§ 0} 0 1

@[fun_prop]
theorem measurable_step' : Measurable step' :=
  Measurable.piecewise (measurableSet_le measurable_id measurable_const)
  (measurable_const) (measurable_const)

lemma sign_eq_step : Real.sign = fun x => step' x - step' (-x) := by
  ext x
  simp only [Real.sign, step']
  by_cases h‚ÇÅ : x < 0
  . have h‚ÇÇ : x ‚â§ 0 := by linarith
    have h‚ÇÉ : ¬¨ 0 ‚â§ x := by linarith
    simp [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]
  . by_cases h‚ÇÇ : 0 < x
    . have h‚ÇÉ : 0 ‚â§ x := by linarith
      have h‚ÇÑ : ¬¨ x ‚â§ 0 := by linarith
      simp [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ, h‚ÇÑ]
    . have h‚ÇÉ : x = 0 := by linarith
      simp [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]

theorem measurable_sign : Measurable (Real.sign : ‚Ñù ‚Üí ‚Ñù) := by
  rw [sign_eq_step]
  fun_prop

@[simp]
theorem abs_of_sign (x) : |Real.sign x| = if x = 0 then 0 else 1 := by
  dsimp [_root_.abs, Real.sign]
  by_cases h‚ÇÅ : x < 0
  . have h‚ÇÇ : x ‚â† 0 := by linarith
    simp [h‚ÇÅ, h‚ÇÇ]
  . by_cases h‚ÇÇ : x = 0
    . simp [h‚ÇÅ, h‚ÇÇ]
    . have h‚ÇÉ : 0 < x := by apply lt_of_le_of_ne; simp at h‚ÇÅ; exact h‚ÇÅ; symm; exact h‚ÇÇ
      simp [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]
@[simp]
theorem nnnorm_of_sign (x) : ‚ÄñReal.sign x‚Äñ‚Çä = if x = 0 then 0 else 1 := by
  ext
  rw [coe_nnnorm, norm_eq_abs, abs_of_sign, apply_ite toReal]
  rfl

def rpow' (y : ‚Ñù) (x : ‚Ñù‚â•0) : ‚Ñù‚â•0 := NNReal.rpow x y

theorem rpow'_eq_rpow (x : ‚Ñù‚â•0) (y : ‚Ñù) : rpow' y x = x^y := rfl

theorem measurable_rpow'_const (c : ‚Ñù) : Measurable (rpow' c) :=
  Measurable.pow (f := fun x => x) (g := fun _ => c) measurable_id measurable_const

@[simp]
theorem rpow_eq_one_iff (x : ‚Ñù‚â•0‚àû) (y : ‚Ñù) (hy : y > 0) : x^y = (1 : ‚Ñù‚â•0‚àû) ‚Üî x = 1 := by
  constructor; swap; intro h; rw [h]; apply ENNReal.one_rpow
  intro h
  rw [‚Üê ENNReal.one_rpow y] at h
  apply le_antisymm <;> {apply (ENNReal.rpow_le_rpow_iff hy).mp; rw [h]}

@[simp]
theorem rpow_div_eq_one_iff (x : ‚Ñù‚â•0‚àû) (y : ‚Ñù) (hy : y > 0) : x^(1/y) = (1 : ‚Ñù‚â•0‚àû) ‚Üî x = 1 := by
  have : 1/y > 0 := by simp [hy]
  rw [rpow_eq_one_iff x (1/y) this]

lemma toNNReal_of_norm_eq_nnnorm (x : ‚Ñù) : ‚Äñx‚Äñ.toNNReal = ‚Äñx‚Äñ‚Çä := by
  calc _ = ‚Äñ‚Äñx‚Äñ‚Äñ‚Çä := by apply toNNReal_eq_nnnorm_of_nonneg; apply norm_nonneg
       _ = _ := by simp

end BasicFunctions


theorem integral_mul_le (hpq : p.IsConjExponent q) (Œº : Measure Œ±) {f : Lp E‚ÇÅ p Œº} {g : Lp E‚ÇÇ q Œº}
    : ‚à´ a, ‚ÄñL (f a) (g a)‚Äñ ‚àÇŒº ‚â§ ‚ÄñL‚Äñ * ‚Äñf‚Äñ * ‚Äñg‚Äñ := by

    have : AEStronglyMeasurable (fun x => L (f x) (g x)) Œº :=
                          by apply L.aestronglyMeasurable_comp‚ÇÇ
                             apply (Lp.mem‚Ñíp f).aestronglyMeasurable
                             apply (Lp.mem‚Ñíp g).aestronglyMeasurable
    rw [integral_norm_eq_lintegral_nnnorm this]

    have : (‚ÄñL‚Äñ‚Çä * (snorm f p Œº) * (snorm g q Œº)).toReal = ‚ÄñL‚Äñ * ‚Äñf‚Äñ * ‚Äñg‚Äñ := by
              calc _ = ‚ÄñL‚Äñ‚Çä.toReal * (snorm f p Œº).toReal * (snorm g q Œº).toReal := by simp
                   _ = ‚ÄñL‚Äñ * ‚Äñf‚Äñ * ‚Äñg‚Äñ                                           := by congr
    rw [‚Üêthis]

    have : ‚à´‚Åª (a : Œ±), ‚Üë‚Äñ(L (f a)) (g a)‚Äñ‚Çä ‚àÇŒº
              ‚â§ ‚Üë‚ÄñL‚Äñ‚Çä * snorm (f) p Œº * snorm (g) q Œº := by apply lintegral_mul_le L hpq Œº
                                                            . apply aestronglyMeasurable_iff_aemeasurable.mp
                                                              apply (Lp.mem‚Ñíp f).aestronglyMeasurable
                                                            . apply aestronglyMeasurable_iff_aemeasurable.mp
                                                              apply (Lp.mem‚Ñíp g).aestronglyMeasurable
    gcongr
    apply mul_ne_top; apply mul_ne_top
    . simp [this]
    . apply snorm_ne_top f
    . apply snorm_ne_top g

variable (Œº) in
theorem snorm_eq_sup_abs'' (hŒº : SigmaFinite Œº) (g : Lp ‚Ñù ‚àû Œº) :
              ‚Äñg‚Äñ = sSup ((fun f => ‚Äñ‚à´ x, (f x) * (g x) ‚àÇŒº‚Äñ) '' {(f : Lp ‚Ñù 1 Œº) | ‚Äñf‚Äñ ‚â§ 1}) := by
  -- we need Œº to be œÉ-finite
  sorry

def to_conj·µ¢ (g : Lp ‚Ñù q Œº) : Œ± ‚Üí ‚Ñù :=
    fun x => Real.sign (g x) * (rpow' (q.toReal-1) ‚Äñg x‚Äñ‚Çä) * ‚Äñg‚Äñ‚Çä^(1- q.toReal)

theorem conj·µ¢_aestrongly_measurable (g : Lp ‚Ñù q Œº) : AEStronglyMeasurable (to_conj·µ¢ g) Œº :=
  (aestronglyMeasurable_iff_aemeasurable (Œº := Œº)).mpr (AEMeasurable.mul (AEMeasurable.mul
  (Measurable.comp_aemeasurable' measurable_sign (Lp.mem‚Ñíp g).aestronglyMeasurable.aemeasurable)
  (Measurable.comp_aemeasurable' (measurable_coe_nnreal_real) (Measurable.comp_aemeasurable'
  (measurable_rpow'_const _) (Measurable.comp_aemeasurable' measurable_nnnorm
  (Lp.mem‚Ñíp g).aestronglyMeasurable.aemeasurable)))) aemeasurable_const)

-- theorem abs_conj·µ¢ (g : Lp ‚Ñù q Œº) (hq‚ÇÅ : q ‚â† 1) (x) : |to_conj·µ¢ g x| = |g x|^(q.toReal-1) * ‚Äñg‚Äñ^(1- q.toReal) := by
--   dsimp [to_conj·µ¢, rpow']
--   rw [abs_mul, abs_mul]

--   have : |‚Äñg‚Äñ^(1 - q.toReal)| = ‚Äñg‚Äñ^(1 - q.toReal) := by apply abs_eq_self.mpr
--                                                          apply rpow_nonneg
--                                                          apply norm_nonneg
--   rw [this]
--   congr
--   have : |(|g x|^((q.toReal - 1)))| = |g x|^((q.toReal - 1)) := by simp
--                                                                    apply rpow_nonneg
--                                                                    apply abs_nonneg
--   rw [this]

--   by_cases h : g x = 0
--   . simp [h]; symm
--     apply (rpow_eq_zero_iff_of_nonneg ?_).mpr; swap; trivial
--     constructor; trivial
--     apply sub_ne_zero_of_ne
--     contrapose! hq‚ÇÅ
--     apply (toReal_eq_one_iff q).mp hq‚ÇÅ

--   . conv_rhs => rw [‚Üêone_mul (|g x|^((q.toReal - 1)))]
--     congr
--     rw [abs_of_sign]
--     simp [h]

theorem nnnorm_conj·µ¢ (g : Lp ‚Ñù q Œº) (hq‚ÇÅ : q ‚â† 1) (x)
    : ‚Äñto_conj·µ¢ g x‚Äñ‚Çä = ‚Äñg x‚Äñ‚Çä^(q.toReal-1) * ‚Äñg‚Äñ‚Çä^(1- q.toReal) := by
  sorry

theorem nnnorm_conj·µ¢' (g : Lp ‚Ñù q Œº) (hq‚ÇÅ : q ‚â† 1) (x)
    : ofNNReal ‚Äñto_conj·µ¢ g x‚Äñ‚Çä = ofNNReal (‚Äñg x‚Äñ‚Çä^(q.toReal-1) * ‚Äñg‚Äñ‚Çä^(1- q.toReal)) := by
 rw [nnnorm_conj·µ¢ g hq‚ÇÅ x]

-- theorem pow_abs_conj·µ¢ (g : Lp ‚Ñù q Œº) (hq‚ÇÅ : q ‚â† 1) (hq·µ¢ : q ‚â† ‚àû) (x) : |to_conj·µ¢ g x|^p.toReal = |g x|^q.toReal * ‚Äñg‚Äñ^(-q.toReal) := by

--   rw [abs_conj·µ¢ g hq‚ÇÅ x, Real.mul_rpow,
--      ‚Üê(Real.rpow_mul ?_ _ _), _root_.sub_mul, one_mul,
--      ‚Üê(Real.rpow_mul ?_ _ _), _root_.sub_mul, one_mul]

--   have : q.toReal*p.toReal - p.toReal = q.toReal := by
--     calc _ = q.toReal*p.toReal - p.toReal - q.toReal + q.toReal       := by simp
--          _ = q.toReal*p.toReal - (p.toReal + q.toReal) + q.toReal     := by rw [‚Üêsub_add_eq_sub_sub]
--          _ = p.toReal*q.toReal - (p.toReal + q.toReal) + q.toReal     := by rw [mul_comm]
--          _ = (p.toReal + q.toReal) - (p.toReal + q.toReal) + q.toReal := by rw [is_conj_exponent' hq·µ¢]
--          _ = 0 + q.toReal                                             := by simp
--          _ = _                                                        := by simp
--   rw [this]
--   have : p.toReal - q.toReal*p.toReal = -q.toReal := by
--     calc _ = -(q.toReal*p.toReal - p.toReal) := by rw [neg_sub]
--          _ = _  := by rw [this]
--   rw [this]

--   apply norm_nonneg
--   apply abs_nonneg
--   apply rpow_nonneg
--   apply abs_nonneg
--   apply rpow_nonneg
--   apply norm_nonneg

theorem pow_nnnorm_conj·µ¢ (g : Lp ‚Ñù q Œº) (hq‚ÇÅ : q ‚â† 1) (hq·µ¢ : q ‚â† ‚àû) (x)
    : (‚Äñto_conj·µ¢ g x‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ p.toReal = (‚Äñg x‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ q.toReal * ‚Äñg‚Äñ‚Çä ^ (-q.toReal) := by
  sorry

def to_conj‚ÇÅ (g : Lp ‚Ñù 1 Œº) : Œ± ‚Üí ‚Ñù := fun x => Real.sign (g x)

theorem conj‚ÇÅ_aestrongly_measurable (g : Lp ‚Ñù 1 Œº) : AEStronglyMeasurable (to_conj‚ÇÅ g) Œº :=
  (aestronglyMeasurable_iff_aemeasurable (Œº := Œº)).mpr (Measurable.comp_aemeasurable' (f := g)
  measurable_sign (aestronglyMeasurable_iff_aemeasurable.mp (Lp.mem‚Ñíp g).aestronglyMeasurable))

-- def to_conj (g : Lp ‚Ñù q Œº) : Œ± ‚Üí ‚Ñù := if q = 1 then to_conj‚ÇÅ g else to_conj·µ¢ g

theorem abs_conj‚ÇÅ (g : Lp ‚Ñù 1 Œº) (x) : |to_conj‚ÇÅ g x| = if g x = 0 then 0 else 1 := by
  apply abs_of_sign

variable (p) in
theorem conj·µ¢_snorm' (g : Lp ‚Ñù q Œº) (hq‚ÇÅ : q ‚â† 1) (hq·µ¢ : q ‚â† ‚àû) :
  (snorm' (to_conj·µ¢ g) p.toReal Œº).toReal = ‚Äñg‚Äñ^(q.toReal/p.toReal) := by

  dsimp only [snorm']
  #check pow_nnnorm_conj·µ¢ (p := p) g hq‚ÇÅ hq·µ¢

  conv =>
    lhs
    pattern ‚Üë‚Äñto_conj·µ¢ g a‚Äñ‚Çä ^ p.toReal
    rw [pow_nnnorm_conj·µ¢ (p := p) g hq‚ÇÅ hq·µ¢ a]

  sorry

variable (p q Œº) in
theorem snorm_eq_sup_abs' (g : Lp ‚Ñù q Œº) (hq·µ¢ : q ‚â† ‚àû) :
              ‚Äñg‚Äñ = sSup ((fun f => ‚Äñ‚à´ x, (f x) * (g x) ‚àÇŒº‚Äñ) '' {(f : Lp ‚Ñù p Œº) | ‚Äñf‚Äñ ‚â§ 1}) := by
  -- basic facts about p and q
  have hpq := hpq.out

  have hp := hp.out
  have h'p := h'p.out
  have hp·µ¢ : p ‚â† ‚àû := by apply lt_top_iff_ne_top.mp h'p
  have hp‚ÇÄ : p ‚â† 0 := by have := by calc 0 < 1   := by norm_num
                                         _ ‚â§ p   := hp
                         exact ne_zero_of_lt this
  have hq := hq.out
  -- let h'q := h'q.out
  -- let hq·µ¢ : q ‚â† ‚àû := by apply lt_top_iff_ne_top.mp h'q
  have hq‚ÇÄ : q ‚â† 0 := by have := by calc 0 < 1   := by norm_num
                                         _ ‚â§ q   := hq
                         exact ne_zero_of_lt this

  -- construction of the function f‚ÇÄ'
  let F := (fun f : Lp ‚Ñù p Œº => ‚Äñ‚à´ x, (f x) * (g x) ‚àÇŒº‚Äñ)
  let S := {f : Lp ‚Ñù p Œº | ‚Äñf‚Äñ ‚â§ 1}

  #check integral_congr_ae

  apply le_antisymm; swap
  . apply Real.sSup_le; swap; apply norm_nonneg
    intro x hx
    rcases hx with ‚ü®f, hf, rfl‚ü©
    simp at hf; dsimp only

    calc _ ‚â§ ‚à´ x, ‚Äñf x * g x‚Äñ ‚àÇŒº             := norm_integral_le_integral_norm _
         _ = ‚à´ x, ‚Äñ(mul ‚Ñù ‚Ñù) (f x) (g x)‚Äñ ‚àÇŒº := by simp
         _ ‚â§ ‚Äñ(mul ‚Ñù ‚Ñù)‚Äñ * ‚Äñf‚Äñ * ‚Äñg‚Äñ         := integral_mul_le _ hpq _
         _ = ‚Äñf‚Äñ * ‚Äñg‚Äñ                       := by simp
         _ ‚â§ 1 * ‚Äñg‚Äñ                         := by gcongr
         _ = ‚Äñg‚Äñ                             := by simp

  --
  . let h‚ÇÅ := fun (y : ‚Ñù) => y^(q.toReal-1)
    have h‚ÇÅ_cont : Continuous h‚ÇÅ := by dsimp only [h‚ÇÅ]
                                       apply Continuous.rpow_const continuous_id
                                       intro _; right; simp;
                                       rw [‚Üê ENNReal.one_toReal]
                                       gcongr
                                       exact hq·µ¢

    let h‚ÇÇ := fun (y : ‚Ñù) => h‚ÇÅ (abs y)
    have h‚ÇÇ_cont : Continuous h‚ÇÇ := h‚ÇÅ_cont.comp' continuous_id.abs

    let h := fun (y : ‚Ñù) => (Real.sign y) * (h‚ÇÇ y) * ‚Äñg‚Äñ^(q.toReal-1)
    let f‚ÇÄ := fun (x : Œ±) => h (g x)

    have h_meas : Measurable h := by apply Measurable.mul
                                     . exact measurable_sign.mul h‚ÇÇ_cont.measurable
                                     . exact measurable_const

    have hf‚ÇÄ_meas : AEStronglyMeasurable f‚ÇÄ Œº := by apply aestronglyMeasurable_iff_aemeasurable.mpr
                                                    dsimp [f‚ÇÄ]
                                                    exact Measurable.comp_aemeasurable' (f := g) (g := h)
                                                      h_meas (aestronglyMeasurable_iff_aemeasurable.mp
                                                      (Lp.mem‚Ñíp g).aestronglyMeasurable)

    #check integral_norm_eq_lintegral_nnnorm hf‚ÇÄ_meas
    #check (rpow_left_inj _ _ _).mp

    have hf_snorm : snorm f‚ÇÄ p Œº = 1 := by simp [snorm, hp‚ÇÄ, hp·µ¢]
                                           dsimp only [snorm']
                                            -- should be easy
                                           sorry

    have hf_mem‚Ñíp : Mem‚Ñíp f‚ÇÄ p Œº := by constructor
                                       . exact hf‚ÇÄ_meas
                                       . simp [hf_snorm]

    let f‚ÇÄ' := by apply toLp f‚ÇÄ
                  . constructor
                    . exact hf‚ÇÄ_meas
                    . apply lt_of_le_of_lt
                      . show snorm f‚ÇÄ p Œº ‚â§ 1
                        simp only [hf_snorm, le_refl]
                      . simp only [one_lt_top]

    have hf‚ÇÄ'_norm : ‚Äñf‚ÇÄ'‚Äñ = 1 := by sorry
    have hf‚ÇÄ'_int : ‚à´ x, (f‚ÇÄ' x) * (g x) ‚àÇŒº = ‚Äñg‚Äñ := by sorry

    . apply le_csSup
      . use ‚Äñg‚Äñ
        intro x hx
        rcases hx with ‚ü®f, hf, rfl‚ü©
        simp at hf

        calc _ ‚â§ ‚à´ x, ‚Äñf x * g x‚Äñ ‚àÇŒº            := norm_integral_le_integral_norm _
            _ = ‚à´ x, ‚Äñ(mul ‚Ñù ‚Ñù) (f x) (g x)‚Äñ ‚àÇŒº := by simp
            _ ‚â§ ‚Äñ(mul ‚Ñù ‚Ñù)‚Äñ * ‚Äñf‚Äñ * ‚Äñg‚Äñ         := integral_mul_le _ hpq _
            _ = ‚Äñf‚Äñ * ‚Äñg‚Äñ                       := by simp
            _ ‚â§ 1 * ‚Äñg‚Äñ                         := by gcongr
            _ = ‚Äñg‚Äñ                             := by simp
        -- this is duplicate code

      . use f‚ÇÄ'
        constructor
        . simp only [Set.mem_setOf_eq]; rw [hf‚ÇÄ'_norm]
        . dsimp only; rw [hf‚ÇÄ'_int]; simp only [norm_norm]

variable (p q Œº) in
theorem snorm_eq_sup_abs (hŒº : SigmaFinite Œº) (g : Lp ‚Ñù q Œº):
              ‚Äñg‚Äñ = sSup ((fun f => ‚Äñ‚à´ x, (f x) * (g x) ‚àÇŒº‚Äñ) '' {(f : Lp ‚Ñù p Œº) | ‚Äñf‚Äñ ‚â§ 1}) := by

  by_cases hq·µ¢ : q ‚â† ‚ä§; swap
  . simp at hq·µ¢
    have hp‚ÇÅ : p = 1 := by {
      rw [left_eq_one_iff, ‚Üê hq·µ¢]
      exact hpq.out
    }
    subst hq·µ¢; subst hp‚ÇÅ

    exact snorm_eq_sup_abs'' Œº hŒº g

  . exact snorm_eq_sup_abs' p q Œº g hq·µ¢

/- The map sending `g` to `f ‚Ü¶ ‚à´ x, L (g x) (f x) ‚àÇŒº` induces a map on `L^q` into
`Lp E‚ÇÇ p Œº ‚ÜíL[‚Ñù] E‚ÇÉ`. Generally we will take `E‚ÇÉ = ‚Ñù`. -/
variable (p Œº) in
def toDual (g : Lp E‚ÇÅ q Œº) : Lp E‚ÇÇ p Œº ‚ÜíL[‚Ñù] E‚ÇÉ := by{

  let F : Lp E‚ÇÇ p Œº ‚Üí E‚ÇÉ := fun f ‚Ü¶ ‚à´ x, L (g x) (f x) ‚àÇŒº

  have : IsBoundedLinearMap ‚Ñù F := by{
    exact {
      map_add := by{
        intro f‚ÇÅ f‚ÇÇ
        simp [F]
        rw [‚Üê integral_add]
        ¬∑ apply integral_congr_ae
          filter_upwards [coeFn_add f‚ÇÅ f‚ÇÇ] with a ha
          norm_cast
          rw [ha]
          simp
        ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g) (Lp.mem‚Ñíp f‚ÇÅ)
        ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g) (Lp.mem‚Ñíp f‚ÇÇ)
        }

      map_smul := by{
        intro m f
        simp [F]
        rw [‚Üê integral_smul]
        apply integral_congr_ae
        filter_upwards [coeFn_smul m f] with a ha
        rw [ha]
        simp
        }

      bound := by{
        suffices henough : ‚àÉ M, ‚àÄ (x : ‚Ü•(Lp E‚ÇÇ p Œº)), ‚ÄñF x‚Äñ ‚â§ M * ‚Äñx‚Äñ from ?_
        . let ‚ü®M, hM‚ü© := henough; clear henough

          by_cases hM_le_zero : M ‚â§ 0
          . use 1; constructor; linarith; intro f
            calc ‚ÄñF f‚Äñ ‚â§ M * ‚Äñf‚Äñ := hM f
                 _     ‚â§ 1 * ‚Äñf‚Äñ := by apply mul_le_mul_of_nonneg_right; linarith
                                       apply norm_nonneg
          . simp at hM_le_zero; use M

        simp only [F]
        use ‚ÄñL‚Äñ * ‚Äñg‚Äñ
        intro f
        calc ‚Äñ‚à´ (x : Œ±), (L (g x)) (f x) ‚àÇŒº‚Äñ ‚â§ ‚à´ (x : Œ±), ‚ÄñL (g x) (f x)‚Äñ ‚àÇŒº := by apply norm_integral_le_integral_norm
             _ ‚â§ ‚ÄñL‚Äñ * ‚Äñg‚Äñ * ‚Äñf‚Äñ := ?_

        apply integral_mul_le L hpq.out.symm
      }
    }
  }

  apply IsBoundedLinearMap.toContinuousLinearMap this
}

/- The map sending `g` to `f ‚Ü¶ ‚à´ x, (f x) * (g x) ‚àÇŒº` is a linear isometry. -/
variable (L' : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù) (L'mul : ‚àÄ x y, L' x y = x * y) (L'norm_one : ‚ÄñL'‚Äñ = 1) in
def toDual‚Çó·µ¢' : Lp ‚Ñù q Œº ‚Üí‚Çó·µ¢[‚Ñù] Lp ‚Ñù p Œº ‚ÜíL[‚Ñù] ‚Ñù where
  toFun := toDual _ _ L'
  map_add':= by{
    intro g‚ÇÅ g‚ÇÇ
    simp [toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap]
    ext f
    simp
    rw [‚Üê integral_add]
    ¬∑ apply integral_congr_ae
      filter_upwards [coeFn_add g‚ÇÅ g‚ÇÇ] with a ha
      norm_cast
      rw [ha]
      simp
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L' hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÅ) (Lp.mem‚Ñíp f)
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L' hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÇ) (Lp.mem‚Ñíp f)
  }
  map_smul':= by{
    intro m g
    simp [toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap]
    ext f
    simp
    rw [‚Üê integral_mul_left] -- mul vs smul
    apply integral_congr_ae
    filter_upwards [coeFn_smul m g] with a ha
    rw [ha]
    simp [L'mul]; ring
  }
  norm_map' := by {
    intro g
    conv_lhs => simp [Norm.norm]
    apply ContinuousLinearMap.opNorm_eq_of_bounds
    . simp
    . intro f
      calc ‚Äñ(toDual p Œº L' g) f‚Äñ ‚â§ ‚à´ x, ‚ÄñL' (g x) (f x)‚Äñ ‚àÇŒº := by apply norm_integral_le_integral_norm
           _ ‚â§ ‚ÄñL'‚Äñ * ‚Äñg‚Äñ * ‚Äñf‚Äñ := by apply integral_mul_le L' hpq.out.symm
           _ = ‚Äñg‚Äñ * ‚Äñf‚Äñ := by simp [L'norm_one]
           _ = _ := by aesop
    . intro N Nnneg
      intro hbound


      let f := fun (x : Œ±) => (Real.sign (g x))

      #check snorm'_lim_eq_lintegral_liminf
      sorry
      -- f = g ^ q-1 have := hbound

    -- apply le_antisymm
    -- . apply ContinuousLinearMap.opNorm_le_bound; apply norm_nonneg
    --   intro f
    --   simp
    --   calc ‚Äñ(toDual p Œº L' g) f‚Äñ = ‚Äñ‚à´ x, L' (g x) (f x) ‚àÇŒº‚Äñ := by congr
    --        _ ‚â§ ‚à´ x, ‚ÄñL' (g x) (f x)‚Äñ ‚àÇŒº := by apply norm_integral_le_integral_norm
    --        _ ‚â§ ‚ÄñL'‚Äñ * ‚Äñg‚Äñ * ‚Äñf‚Äñ := by apply integral_mul_le; exact hpq.out.symm
    --        _ = ‚Äñg‚Äñ * ‚Äñf‚Äñ := by simp [L'norm_one]

    -- . simp [Norm.norm, ContinuousLinearMap.opNorm]
    --   -- apply UniformSpace.le_sInf (Œ± := ‚Ñù)
    --   -- #check (@sInf ‚Ñù).le
    --   sorry
  }

/- The map sending `g` to `f ‚Ü¶ ‚à´ x, L (f x) (g x) ‚àÇŒº` is a linear isometry. -/
variable (p q Œº) in
def toDual‚Çó·µ¢ : Lp E‚ÇÅ q Œº ‚Üí‚Çó·µ¢[‚Ñù] Lp E‚ÇÇ p Œº ‚ÜíL[‚Ñù] E‚ÇÉ where

  toFun := toDual _ _ L
  map_add':= by{
    intro g‚ÇÅ g‚ÇÇ
    simp [toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap]
    ext f
    simp
    rw [‚Üê integral_add]
    ¬∑ apply integral_congr_ae
      filter_upwards [coeFn_add g‚ÇÅ g‚ÇÇ] with a ha
      norm_cast
      rw [ha]
      simp
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÅ) (Lp.mem‚Ñíp f)
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÇ) (Lp.mem‚Ñíp f)
  }
  map_smul':= by{
    intro m g
    simp [toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap]
    ext f
    simp
    rw [‚Üê integral_smul]
    apply integral_congr_ae
    filter_upwards [coeFn_smul m g] with a ha
    rw [ha]
    simp
  }
  norm_map' := by {
    sorry
  }

/- The map sending `g` to `f ‚Ü¶ ‚à´ x, L (f x) (g x) ‚àÇŒº` is a linear isometric equivalence.  -/
variable (p q Œº) in
def dualIsometry (L : E‚ÇÅ ‚ÜíL[‚Ñù] Dual ‚Ñù E‚ÇÇ) :
    Dual ‚Ñù (Lp E‚ÇÇ p Œº) ‚âÉ‚Çó·µ¢[‚Ñù] Lp E q Œº :=
  sorry

end Lp
end MeasureTheory

end
