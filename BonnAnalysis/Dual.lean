import Mathlib.MeasureTheory.Integral.MeanInequalities
import Mathlib.MeasureTheory.Function.L1Space
import Mathlib.MeasureTheory.Function.LpSpace
import Mathlib.Analysis.SpecialFunctions.Pow.Continuity
import Mathlib.Analysis.NormedSpace.Dual
import Mathlib.Analysis.NormedSpace.LinearIsometry
import Mathlib.MeasureTheory.Integral.Bochner
import Mathlib.Data.Real.Sign

/-! We show that the dual space of `L^p` for `1 ‚â§ p < ‚àû`.

See [Stein-Shakarchi, Functional Analysis, section 1.4] -/
noncomputable section

open Real NNReal ENNReal NormedSpace MeasureTheory
section

variable {Œ± ùïú E E‚ÇÅ E‚ÇÇ E‚ÇÉ : Type*} {m : MeasurableSpace Œ±} {p p' q q' : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±} [NontriviallyNormedField ùïú]
  [NormedAddCommGroup E] [NormedSpace ùïú E] [FiniteDimensional ùïú E]
  [NormedAddCommGroup E‚ÇÅ] [NormedSpace ùïú E‚ÇÅ] [FiniteDimensional ùïú E‚ÇÅ]
  [NormedAddCommGroup E‚ÇÇ] [NormedSpace ùïú E‚ÇÇ] [FiniteDimensional ùïú E‚ÇÇ]
  [NormedAddCommGroup E‚ÇÉ] [NormedSpace ùïú E‚ÇÉ] [FiniteDimensional ùïú E‚ÇÉ]
  [MeasurableSpace E] [BorelSpace E]
  [MeasurableSpace E‚ÇÅ] [BorelSpace E‚ÇÅ]
  [MeasurableSpace E‚ÇÇ] [BorelSpace E‚ÇÇ]
  [MeasurableSpace E‚ÇÉ] [BorelSpace E‚ÇÉ]
  (L : E‚ÇÅ ‚ÜíL[ùïú] E‚ÇÇ ‚ÜíL[ùïú] E‚ÇÉ)

namespace ENNReal

/-- Two numbers `p, q : ‚Ñù‚â•0‚àû` are conjugate if `p‚Åª¬π + q‚Åª¬π = 1`.
This does allow for the case where one of them is `‚àû` and the other one is `1`,
in contrast to `NNReal.IsConjExponent`. -/
@[mk_iff]
structure IsConjExponent (p q : ‚Ñù‚â•0‚àû) : Prop where
  inv_add_inv_conj : p‚Åª¬π + q‚Åª¬π = 1

namespace IsConjExponent

lemma symm (hpq : p.IsConjExponent q) : q.IsConjExponent p := by
  rw [isConjExponent_iff, add_comm, hpq.inv_add_inv_conj]

lemma one_le_left (hpq : p.IsConjExponent q) : 1 ‚â§ p := by
  simp_rw [‚Üê ENNReal.inv_le_one, ‚Üê hpq.inv_add_inv_conj, self_le_add_right]

lemma one_le_right (hpq : p.IsConjExponent q) : 1 ‚â§ q := hpq.symm.one_le_left

lemma left_ne_zero (hpq : p.IsConjExponent q) : p ‚â† 0 := zero_lt_one.trans_le hpq.one_le_left |>.ne'

lemma right_ne_zero (hpq : p.IsConjExponent q) : q ‚â† 0 := hpq.symm.left_ne_zero

lemma left_inv_ne_top (hpq : p.IsConjExponent q) : p‚Åª¬π ‚â† ‚àû := by
  rw [inv_ne_top]
  exact hpq.left_ne_zero

lemma right_inv_ne_top (hpq : p.IsConjExponent q) : q‚Åª¬π ‚â† ‚àû := hpq.symm.left_inv_ne_top

lemma left_eq (hpq : p.IsConjExponent q) : p = (1 - q‚Åª¬π)‚Åª¬π := by
  rw [‚Üê inv_eq_iff_eq_inv]
  exact (ENNReal.cancel_of_ne hpq.right_inv_ne_top).eq_tsub_of_add_eq hpq.inv_add_inv_conj

lemma right_eq (hpq : p.IsConjExponent q) : q = (1 - p‚Åª¬π)‚Åª¬π := hpq.symm.left_eq

lemma inj_right (hpq : p.IsConjExponent q) (hpq' : p.IsConjExponent q') : q = q' := by
  rw [hpq.right_eq, hpq'.right_eq]

lemma inj_left (hpq : p.IsConjExponent q) (hpq' : p'.IsConjExponent q) : p = p' :=
  hpq.symm.inj_right hpq'.symm

lemma left_eq_left_iff_right_eq_right (hpq : p.IsConjExponent q) (hpq' : p'.IsConjExponent q') :
    p = p' ‚Üî q = q' := by
  constructor <;> rintro rfl <;> [apply inj_right; apply inj_left] <;> assumption

lemma one_top : (1 : ‚Ñù‚â•0‚àû).IsConjExponent ‚àû := ‚ü®by simp‚ü©

lemma top_one : (‚àû : ‚Ñù‚â•0‚àû).IsConjExponent 1 := ‚ü®by simp‚ü©

lemma left_eq_one_iff (hpq : p.IsConjExponent q) : p = 1 ‚Üî q = ‚àû :=
  hpq.left_eq_left_iff_right_eq_right .one_top

lemma left_eq_top_iff (hpq : p.IsConjExponent q) : p = ‚àû ‚Üî q = 1 :=
  (left_eq_one_iff hpq.symm).symm

lemma one_lt_left_iff (hpq : p.IsConjExponent q) : 1 < p ‚Üî q ‚â† ‚àû := by
  rw [‚Üê not_iff_not, not_lt, ne_eq, not_not, hpq.one_le_left.le_iff_eq, hpq.left_eq_one_iff]

lemma left_ne_top_iff (hpq : p.IsConjExponent q) : p ‚â† ‚àû ‚Üî 1 < q :=
  (one_lt_left_iff hpq.symm).symm

lemma _root_.NNReal.IsConjExponent.coe_ennreal {p q : ‚Ñù‚â•0} (hpq : p.IsConjExponent q) :
    (p : ‚Ñù‚â•0‚àû).IsConjExponent q where
  inv_add_inv_conj := by
    have := hpq.symm.ne_zero
    have := hpq.ne_zero
    rw_mod_cast [hpq.inv_add_inv_conj]

lemma toNNReal {p q : ‚Ñù‚â•0‚àû} (hp : p ‚â† ‚àû) (hq : q ‚â† ‚àû) (hpq : p.IsConjExponent q) :
    p.toNNReal.IsConjExponent q.toNNReal where
  one_lt := by
    rwa [‚Üê coe_lt_coe, coe_toNNReal hp, coe_one, hpq.one_lt_left_iff]
  inv_add_inv_conj := by
    rw [‚Üê coe_inj, coe_add, coe_inv, coe_inv, coe_one, coe_toNNReal hp, coe_toNNReal hq,
      hpq.inv_add_inv_conj]
    ¬∑ exact (toNNReal_ne_zero).mpr ‚ü®hpq.right_ne_zero, hq‚ü©
    ¬∑ exact (toNNReal_ne_zero).mpr ‚ü®hpq.left_ne_zero, hp‚ü©

lemma mul_eq_add (hpq : p.IsConjExponent q) : p * q = p + q := by
  induction p
  . simp only [ne_eq, hpq.right_ne_zero, not_false_eq_true, top_mul, top_add]
  induction q
  . simp only [ne_eq, hpq.left_ne_zero, not_false_eq_true, mul_top, add_top]
  norm_cast
  exact hpq.toNNReal coe_ne_top coe_ne_top |>.mul_eq_add

lemma induction
    (P : (p q : ‚Ñù‚â•0‚àû) ‚Üí (p.IsConjExponent q) ‚Üí Prop)
    (nnreal : ‚àÄ ‚¶Ép q : ‚Ñù‚â•0‚¶Ñ, (h : p.IsConjExponent q) ‚Üí P p q h.coe_ennreal)
    (one : P 1 ‚àû one_top) (infty : P ‚àû 1 top_one) {p q : ‚Ñù‚â•0‚àû} (h : p.IsConjExponent q) :
    P p q h := by
  induction p
  . simp_rw [h.left_eq_top_iff.mp rfl, infty]
  induction q
  . simp_rw [h.left_eq_one_iff.mpr rfl, one]
  exact nnreal <| h.toNNReal coe_ne_top coe_ne_top

lemma induction_symm
    (P : (p q : ‚Ñù‚â•0‚àû) ‚Üí (p.IsConjExponent q) ‚Üí Prop)
    (nnreal : ‚àÄ ‚¶Ép q : ‚Ñù‚â•0‚¶Ñ, (h : p.IsConjExponent q) ‚Üí p ‚â§ q ‚Üí P p q h.coe_ennreal)
    (one : P 1 ‚àû one_top)
    (symm : ‚àÄ ‚¶Ép q : ‚Ñù‚â•0‚àû‚¶Ñ, (h : p.IsConjExponent q) ‚Üí P p q h ‚Üí P q p h.symm)
    {p q : ‚Ñù‚â•0‚àû} (h : p.IsConjExponent q) : P p q h := by
  induction h using IsConjExponent.induction
  case nnreal p q h =>
    rcases le_total p q with hpq|hqp
    ¬∑ exact nnreal h hpq
    ¬∑ exact symm h.coe_ennreal.symm (nnreal h.symm hqp)
  case one => exact one
  case infty => exact symm .one_top one

/- Versions of H√∂lder's inequality.
Note that the hard case already exists as `ENNReal.lintegral_mul_le_Lp_mul_Lq`. -/

lemma _root_.ContinuousLinearMap.le_opNNNorm‚ÇÇ (L : E‚ÇÅ ‚ÜíL[ùïú] E‚ÇÇ ‚ÜíL[ùïú] E‚ÇÉ) (x : E‚ÇÅ) (y : E‚ÇÇ) :
    ‚ÄñL x y‚Äñ‚Çä ‚â§ ‚ÄñL‚Äñ‚Çä * ‚Äñx‚Äñ‚Çä * ‚Äñy‚Äñ‚Çä := L.le_opNorm‚ÇÇ x y

lemma _root_.ENNReal.lintegral_mul_le_one_top (Œº : Measure Œ±) {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : AEMeasurable f Œº) :
  ‚à´‚Åª (a : Œ±), (f * g) a ‚àÇŒº ‚â§ (‚à´‚Åª (a : Œ±), f a ‚àÇŒº) * (essSup g Œº) := by
    calc ‚à´‚Åª (a : Œ±), (f * g) a ‚àÇŒº = ‚à´‚Åª (a : Œ±), (f * g) a ‚àÇŒº := rfl
    _ ‚â§ ‚à´‚Åª (a : Œ±), f a * (essSup g Œº) ‚àÇŒº := by
      apply MeasureTheory.lintegral_mono_ae
      rw [Filter.eventually_iff, ‚Üê Filter.exists_mem_subset_iff]
      use {a | g a ‚â§ essSup g Œº}
      rw [‚Üê Filter.eventually_iff]
      exact ‚ü®ae_le_essSup _, by simp only [Pi.mul_apply, Set.setOf_subset_setOf]; intro _ ha; exact ENNReal.mul_left_mono ha‚ü©
    _ = (‚à´‚Åª (a : Œ±), f a ‚àÇŒº) * (essSup g Œº) := by
      rw [lintegral_mul_const'' _ hf]

lemma _root_.ENNReal.lintegral_norm_mul_le_one_top (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : AEMeasurable f Œº) : ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº ‚â§ snorm f 1 Œº * snorm g ‚ä§ Œº := by
      simp only [snorm, one_ne_zero, ‚ÜìreduceIte, one_ne_top, snorm', one_toReal, rpow_one, ne_eq,
        not_false_eq_true, div_self, top_ne_zero, snormEssSup]
      exact lintegral_mul_le_one_top _ hf.ennnorm

theorem lintegral_mul_le (hpq : p.IsConjExponent q) (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : AEMeasurable f Œº) (hg : AEMeasurable g Œº) :
    ‚à´‚Åª a, ‚ÄñL (f a) (g a)‚Äñ‚Çä ‚àÇŒº ‚â§ ‚ÄñL‚Äñ‚Çä * snorm f p Œº * snorm g q Œº := by
  calc ‚à´‚Åª a, ‚ÄñL (f a) (g a)‚Äñ‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª a, ‚ÄñL‚Äñ‚Çä * (‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä) ‚àÇŒº := by
        simp_rw [‚Üê mul_assoc]; exact lintegral_mono_nnreal fun a ‚Ü¶ L.le_opNNNorm‚ÇÇ (f a) (g a)
    _ = ‚ÄñL‚Äñ‚Çä * ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº := lintegral_const_mul' _ _ coe_ne_top
    _ ‚â§ ‚ÄñL‚Äñ‚Çä * (snorm f p Œº * snorm g q Œº) := ?_
    _ = ‚ÄñL‚Äñ‚Çä * snorm f p Œº * snorm g q Œº := by rw [mul_assoc]
  gcongr
  induction hpq using IsConjExponent.induction
  case nnreal p q hpq =>
    calc
      ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº = ‚à´‚Åª a, ((‚Äñf ¬∑‚Äñ‚Çä) * (‚Äñg ¬∑‚Äñ‚Çä)) a ‚àÇŒº := by
        apply lintegral_congr
        simp only [Pi.mul_apply, coe_mul, implies_true]
      _ ‚â§ snorm f p Œº * snorm g q Œº := by
        simp only [coe_mul, snorm, coe_eq_zero, coe_ne_top, ‚ÜìreduceIte, coe_toReal, mul_ite, mul_zero, ite_mul, zero_mul, hpq.ne_zero, hpq.symm.ne_zero, snorm']
        exact ENNReal.lintegral_mul_le_Lp_mul_Lq _ (NNReal.isConjExponent_coe.mpr hpq) hf.ennnorm hg.ennnorm
  case one => exact lintegral_norm_mul_le_one_top _ hf
  case infty =>
    calc
      ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº = ‚à´‚Åª a, ‚Äñg a‚Äñ‚Çä * ‚Äñf a‚Äñ‚Çä ‚àÇŒº := by simp_rw [mul_comm]
    _ ‚â§ snorm f ‚ä§ Œº * snorm g 1 Œº := by rw [mul_comm]; exact lintegral_norm_mul_le_one_top _ hg

theorem integrable_bilin (hpq : p.IsConjExponent q) (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g q Œº) :
    Integrable (fun a ‚Ü¶ L (f a) (g a)) Œº := by
  use L.aestronglyMeasurable_comp‚ÇÇ hf.aestronglyMeasurable hg.aestronglyMeasurable
  exact lintegral_mul_le L hpq Œº hf.aestronglyMeasurable.aemeasurable
    hg.aestronglyMeasurable.aemeasurable |>.trans_lt (ENNReal.mul_lt_top
    (ENNReal.mul_ne_top coe_ne_top hf.snorm_ne_top) hg.snorm_ne_top)

end IsConjExponent

lemma toNNReal_eq_toNNreal_of_toReal (x : ‚Ñù‚â•0‚àû) :
    x.toReal.toNNReal = x.toNNReal := by
    rename_i inst inst_1 inst_2 _ inst_4 inst_5 _ inst_7 inst_8 _ inst_10 inst_11 _ inst_13
      _ inst_15 _ inst_17 _ inst_19 _
    ext1
    simp_all only [coe_toNNReal', toReal_nonneg, max_eq_left]
    apply Eq.refl

lemma rpow_of_to_ENNReal_of_NNReal_ne_top (x : ‚Ñù‚â•0) (y : ‚Ñù) (hynneg : y ‚â• 0)
    : (x : ‚Ñù‚â•0‚àû) ^ y ‚â† ‚àû := by aesop

lemma nnnorm_of_toReal_eq_toNNReal (x : ‚Ñù‚â•0‚àû) : ‚Äñx.toReal‚Äñ‚Çä = x.toNNReal := by
  ext1
  simp only [coe_nnnorm, norm_eq_abs, abs_toReal]
  rfl

def rpow' (y : ‚Ñù) (x : ‚Ñù‚â•0‚àû) : ‚Ñù‚â•0‚àû := ENNReal.rpow x y

theorem rpow'_eq_rpow (x : ‚Ñù‚â•0‚àû) (y : ‚Ñù) : rpow' y x = x^y := rfl

theorem measurable_rpow'_const (c : ‚Ñù) : Measurable (rpow' c) := by
  apply Measurable.pow (f := fun x => x) (g := fun _ => c) <;> fun_prop

end ENNReal

end

section
namespace MeasureTheory
namespace Lp
open ENNReal.IsConjExponent

variable {Œ± E E‚ÇÅ E‚ÇÇ E‚ÇÉ : Type*} {m : MeasurableSpace Œ±} {p q : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±}
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [NormedAddCommGroup E‚ÇÅ] [NormedSpace ‚Ñù E‚ÇÅ] [FiniteDimensional ‚Ñù E‚ÇÅ]
  [NormedAddCommGroup E‚ÇÇ] [NormedSpace ‚Ñù E‚ÇÇ] [FiniteDimensional ‚Ñù E‚ÇÇ]
  [NormedAddCommGroup E‚ÇÉ] [NormedSpace ‚Ñù  E‚ÇÉ] [FiniteDimensional ‚Ñù  E‚ÇÉ]
  [MeasurableSpace E] [BorelSpace E]
  [MeasurableSpace E‚ÇÅ] [BorelSpace E‚ÇÅ]
  [MeasurableSpace E‚ÇÇ] [BorelSpace E‚ÇÇ]
  [MeasurableSpace E‚ÇÉ] [BorelSpace E‚ÇÉ]
  (L : E‚ÇÅ ‚ÜíL[‚Ñù] E‚ÇÇ ‚ÜíL[‚Ñù] E‚ÇÉ)

variable
  [hpq : Fact (p.IsConjExponent q)] [h'p : Fact (p < ‚àû)]
  [hp : Fact (1 ‚â§ p)] [hq : Fact (1 ‚â§ q)] -- note: these are superfluous, but it's tricky to make them instances.

section  BasicFactsConjugateExponents

lemma p_ne_zero : p ‚â† 0 := left_ne_zero hpq.out

lemma p_ne_top : p ‚â† ‚àû := lt_top_iff_ne_top.mp h'p.out

lemma p_ne_zero' : p.toReal ‚â† 0 := toReal_ne_zero.mpr ‚ü®p_ne_zero (q := q), p_ne_top‚ü©

lemma p_gt_zero : p > 0 := by
  calc p ‚â• 1 := hp.out
       _ > 0 := zero_lt_one' ‚Ñù‚â•0‚àû

lemma p_gt_zero' : p.toReal > 0 := (toReal_pos_iff_ne_top p).mpr p_ne_top

lemma p_ge_zero : p ‚â• 0 := zero_le p

lemma p_ge_zero' : p.toReal ‚â• 0 := toReal_nonneg

lemma q_ne_zero : q ‚â† 0 := right_ne_zero hpq.out

lemma q_ne_zero' (hq·µ¢ : q ‚â† ‚àû) : q.toReal ‚â† 0 := toReal_ne_zero.mpr ‚ü®q_ne_zero (p := p), hq·µ¢‚ü©

lemma q_gt_zero : q > 0 := p_gt_zero

lemma q_gt_zero' (hq·µ¢ : q ‚â† ‚àû) : q.toReal > 0 := (toReal_pos_iff_ne_top q).mpr hq·µ¢

lemma q_ge_zero : q ‚â• 0 := p_ge_zero

lemma q_ge_zero' : q.toReal ‚â• 0 := p_ge_zero'

lemma q_gt_one : q > 1 := (left_ne_top_iff hpq.out).mp p_ne_top

lemma q_gt_one' (hq·µ¢ : q ‚â† ‚àû) : q.toReal > 1 :=
  ENNReal.one_toReal ‚ñ∏ (ENNReal.toReal_lt_toReal (Ne.symm top_ne_one) hq·µ¢).mpr
    (q_gt_one (q := q) (p := p))

lemma q_ge_one : q ‚â• 1 := by apply le_of_lt; exact q_gt_one (p := p)

lemma q_ge_one' (hq·µ¢ : q ‚â† ‚àû) : q.toReal ‚â• 1 :=
  ENNReal.one_toReal ‚ñ∏ (ENNReal.toReal_le_toReal (Ne.symm top_ne_one) hq·µ¢).mpr
    (q_ge_one (q := q) (p := p))

lemma q_sub_one_pos' (hq·µ¢ : q ‚â† ‚àû) : q.toReal - 1 > 0 :=
  sub_pos.mpr (q_gt_one' (q := q) (p := p) hq·µ¢)

lemma q_sub_one_nneg' (hq·µ¢ : q ‚â† ‚àû) : q.toReal - 1 ‚â• 0 := by
  linarith [q_sub_one_pos' (q := q) (p := p) hq·µ¢]

lemma p_add_q : p + q = p * q := hpq.out.mul_eq_add.symm

lemma p_add_q' (hq·µ¢ : q ‚â† ‚àû) : p.toReal + q.toReal = p.toReal*q.toReal := by
  rw [‚Üê toReal_add p_ne_top hq·µ¢, ‚Üê toReal_mul]
  congr
  exact p_add_q

lemma q_div_p_ne_top (hq·µ¢ : q ‚â† ‚àû) : q / p ‚â† ‚àû := by
  by_contra!
  have := (@ENNReal.div_eq_top q p).mp this
  contrapose! this
  exact ‚ü®fun _ ‚Ü¶ p_ne_zero (q := q), fun _ ‚Ü¶ by contradiction‚ü©

lemma q_div_p_add_one : q / p + 1 = q := by
  calc _ = q / p + p / p := by rw [ENNReal.div_self (p_ne_zero (q := q)) p_ne_top]
       _ = (q + p) / p := ENNReal.div_add_div_same
       _ = (p + q) / p := by rw [add_comm]
       _ = (p * q) / p := by rw [p_add_q]
       _ = (p * q) / (p * 1) := by rw [mul_one]
       _ = q / 1 := by rw [ENNReal.mul_div_mul_left _ _ (p_ne_zero (q := q)) p_ne_top]
       _ = q := div_one q

lemma q_div_p_add_one' (hq·µ¢ : q ‚â† ‚àû) : q.toReal / p.toReal + 1 = q.toReal := by
  calc _ = (q / p).toReal + 1 := by rw [toReal_div]
       _ = (q / p + 1).toReal := by rw [toReal_add]; simp only [one_toReal]; exact q_div_p_ne_top hq·µ¢; simp
       _ = q.toReal := by rw [q_div_p_add_one]

lemma q_div_p_add_one'' (hq·µ¢ : q ‚â† ‚àû) : q.toReal / p.toReal = q.toReal - 1 := by
  calc _ = q.toReal / p.toReal + 1 - 1 := Eq.symm (add_sub_cancel_right (q.toReal / p.toReal) 1)
       _ = q.toReal - 1 := by rw [q_div_p_add_one' hq·µ¢]

end BasicFactsConjugateExponents

open ContinuousLinearMap
open Mem‚Ñíp

section BasicFunctions

--Inference of Module takes 130ms, but I don't get this message every time. Same for other theorems in the file
theorem snorm'_mul_const {p : ‚Ñù} (hp : p > 0) (f : Œ± ‚Üí ‚Ñù) (c : ‚Ñù) :
    snorm' (fun x => f x * c) p Œº = (snorm' f p Œº) * ‚Äñc‚Äñ‚Çä := by
  unfold snorm'; dsimp only; simp_all only [gt_iff_lt, nnnorm_mul, ENNReal.coe_mul, one_div]

  by_cases hc : c = 0
  . simp_all only [_root_.nnnorm_zero, ENNReal.coe_zero, mul_zero, zero_rpow_of_pos,
    lintegral_const, zero_mul, inv_pos]

  conv =>
    pattern (_ * _) ^ _
    rw [ENNReal.mul_rpow_of_ne_top]
    rfl
    ¬∑ exact coe_ne_top
    ¬∑ exact coe_ne_top

  rw [lintegral_mul_const']
  case neg.hr => simp_all only [ne_eq, rpow_eq_top_iff, ENNReal.coe_eq_zero, nnnorm_eq_zero,
    false_and, coe_ne_top, and_true, or_self, not_false_eq_true]

  by_cases hf : ‚à´‚Åª (a : Œ±), ‚Üë‚Äñf a‚Äñ‚Çä ^ p ‚àÇŒº = ‚àû
  . rw [hf]; simp_all only [ne_eq, ENNReal.rpow_eq_zero_iff, ENNReal.coe_eq_zero, nnnorm_eq_zero,
    and_true, coe_ne_top, false_and, or_self, not_false_eq_true, top_mul, inv_pos, top_rpow_of_pos]

  rw [ENNReal.mul_rpow_of_ne_top hf]
  case neg.hy => simp_all only [ne_eq, rpow_eq_top_iff, ENNReal.coe_eq_zero, nnnorm_eq_zero,
    false_and, coe_ne_top, and_true, or_self, not_false_eq_true];
    
  congr
  apply ENNReal.rpow_rpow_inv
  exact ne_of_gt hp

theorem nnnorm_toReal_eq_abs (x : ‚Ñù) : ‚Äñx‚Äñ‚Çä.toReal = |x| := by rw [coe_nnnorm, norm_eq_abs]

def step' : ‚Ñù ‚Üí ‚Ñù := Set.piecewise {x | x ‚â§ 0} 0 1

@[fun_prop]
theorem measurable_step' : Measurable step' :=
  Measurable.piecewise (measurableSet_le measurable_id measurable_const)
  (measurable_const) (measurable_const)

lemma sign_eq_step : Real.sign = fun x => step' x - step' (-x) := by
  ext x
  simp only [Real.sign, step']
  by_cases h‚ÇÅ : x < 0
  . have h‚ÇÇ : x ‚â§ 0 := by linarith
    have h‚ÇÉ : ¬¨ 0 ‚â§ x := by linarith
    simp [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]
  . by_cases h‚ÇÇ : 0 < x
    . have h‚ÇÉ : 0 ‚â§ x := by linarith
      have h‚ÇÑ : ¬¨ x ‚â§ 0 := by linarith
      simp [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ, h‚ÇÑ]
    . have h‚ÇÉ : x = 0 := by linarith
      simp [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]

theorem measurable_sign : Measurable (Real.sign : ‚Ñù ‚Üí ‚Ñù) := by
  rw [sign_eq_step]
  fun_prop

@[simp]
theorem abs_of_sign (x) : |Real.sign x| = if x = 0 then 0 else 1 := by
  dsimp [_root_.abs, Real.sign]
  by_cases h‚ÇÅ : x < 0
  . have h‚ÇÇ : x ‚â† 0 := by linarith
    simp [h‚ÇÅ, h‚ÇÇ]
  . by_cases h‚ÇÇ : x = 0
    . simp [h‚ÇÅ, h‚ÇÇ]
    . have h‚ÇÉ : 0 < x := by apply lt_of_le_of_ne; simp only [not_lt] at h‚ÇÅ; exact h‚ÇÅ; symm; exact h‚ÇÇ
      simp [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]
@[simp]
theorem nnnorm_of_sign (x) : ‚ÄñReal.sign x‚Äñ‚Çä = if x = 0 then 0 else 1 := by
  ext
  rw [coe_nnnorm, norm_eq_abs, abs_of_sign, apply_ite toReal]
  rfl

theorem Real.self_mul_sign (x : ‚Ñù) : x * x.sign = |x| := by
  by_cases hx‚ÇÅ : x = 0
  . rw [hx‚ÇÅ, Real.sign_zero, mul_zero, abs_zero]
  . by_cases hx‚ÇÇ : x > 0
    . rw [Real.sign_of_pos hx‚ÇÇ, mul_one, abs_of_pos hx‚ÇÇ]
    . have hx‚ÇÉ : x < 0 := lt_of_le_of_ne (by linarith) hx‚ÇÅ
      rw [Real.sign_of_neg hx‚ÇÉ, mul_neg_one, abs_of_neg hx‚ÇÉ]

theorem rpow_of_nnnorm_of_sign (x y : ‚Ñù) (hypos : y > 0)
    : (‚ÄñReal.sign x‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ y = if x = 0 then 0 else 1 := by aesop

def rpow' (y : ‚Ñù) (x : ‚Ñù‚â•0) : ‚Ñù‚â•0 := NNReal.rpow x y

theorem rpow'_eq_rpow (x : ‚Ñù‚â•0) (y : ‚Ñù) : rpow' y x = x^y := rfl

theorem ennreal_rpow_of_nnreal (x : ‚Ñù‚â•0) (y : ‚Ñù)
    : (ENNReal.rpow x y).toNNReal = NNReal.rpow x y := by
  simp only [ENNReal.rpow_eq_pow, NNReal.rpow_eq_pow]
  rw [‚ÜêENNReal.toNNReal_rpow]
  simp only [ENNReal.toNNReal_coe]

theorem ennreal_rpow_of_nnreal' (x : ‚Ñù‚â•0) (y : ‚Ñù) (hynneg : y ‚â• 0)
    : ENNReal.rpow x y = ofNNReal (NNReal.rpow x y) := by
  apply (ENNReal.toNNReal_eq_toNNReal_iff' _ _).mp <;> simp
  . rw [‚ÜêENNReal.toNNReal_rpow, ENNReal.toNNReal_coe]
  . exact fun _ ‚Ü¶ hynneg

theorem measurable_rpow'_const (c : ‚Ñù) : Measurable (rpow' c) :=
  Measurable.pow (f := fun x => x) (g := fun _ => c) measurable_id measurable_const

@[simp]
theorem rpow_eq_one_iff (x : ‚Ñù‚â•0‚àû) (y : ‚Ñù) (hy : y > 0) : x^y = (1 : ‚Ñù‚â•0‚àû) ‚Üî x = 1 := by
  constructor; swap; intro h; rw [h]; apply ENNReal.one_rpow
  intro h
  rw [‚Üê ENNReal.one_rpow y] at h
  apply le_antisymm <;> {apply (ENNReal.rpow_le_rpow_iff hy).mp; rw [h]}

@[simp]
theorem rpow_div_eq_one_iff (x : ‚Ñù‚â•0‚àû) (y : ‚Ñù) (hy : y > 0) : x^(1/y) = (1 : ‚Ñù‚â•0‚àû) ‚Üî x = 1 := by
  have : 1/y > 0 := by simp [hy]
  rw [rpow_eq_one_iff x (1/y) this]

lemma toNNReal_of_norm_eq_nnnorm (x : ‚Ñù) : ‚Äñx‚Äñ.toNNReal = ‚Äñx‚Äñ‚Çä := by
  calc _ = ‚Äñ‚Äñx‚Äñ‚Äñ‚Çä := toNNReal_eq_nnnorm_of_nonneg (norm_nonneg _)
       _ = _ := nnnorm_norm x

theorem mul_of_ae_eq {f f' g g' : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : f =·µê[Œº] f') (hg : g =·µê[Œº] g')
    : f * g =·µê[Œº] f' * g' := by
  apply ae_iff.mpr
  apply measure_mono_null

  show {a | (f * g) a ‚â† (f' * g') a} ‚äÜ {a | f a ‚â† f' a} ‚à™ {a | g a ‚â† g' a}

  . intro a ha
    by_contra!
    aesop
  . apply measure_union_null <;> assumption

theorem mul_of_ae_eq_one (f g: Œ± ‚Üí ‚Ñù‚â•0‚àû) (hf : f =·µê[Œº] 1) : f * g =·µê[Œº] g := by
  conv =>
    rhs
    rw [‚Üêone_mul g]

  apply mul_of_ae_eq hf
  trivial

end BasicFunctions

-- Generalized version of H√∂lder's inequality.
theorem integral_mul_le (hpq : p.IsConjExponent q) (Œº : Measure Œ±) {f : Lp E‚ÇÅ p Œº} {g : Lp E‚ÇÇ q Œº}
    : ‚à´ a, ‚ÄñL (f a) (g a)‚Äñ ‚àÇŒº ‚â§ ‚ÄñL‚Äñ * ‚Äñf‚Äñ * ‚Äñg‚Äñ := by

  have : AEStronglyMeasurable (fun x => L (f x) (g x)) Œº :=
    L.aestronglyMeasurable_comp‚ÇÇ (Lp.mem‚Ñíp f).aestronglyMeasurable (Lp.mem‚Ñíp g).aestronglyMeasurable

  rw [integral_norm_eq_lintegral_nnnorm this]

  have : (‚ÄñL‚Äñ‚Çä * (snorm f p Œº) * (snorm g q Œº)).toReal = ‚ÄñL‚Äñ * ‚Äñf‚Äñ * ‚Äñg‚Äñ := by
    calc _ = ‚ÄñL‚Äñ‚Çä.toReal * (snorm f p Œº).toReal * (snorm g q Œº).toReal := by simp only [toReal_mul,
      coe_toReal, coe_nnnorm]
         _ = ‚ÄñL‚Äñ * ‚Äñf‚Äñ * ‚Äñg‚Äñ                                           := by congr
  rw [‚Üêthis]

  have : ‚à´‚Åª (a : Œ±), ‚Üë‚Äñ(L (f a)) (g a)‚Äñ‚Çä ‚àÇŒº ‚â§ ‚Üë‚ÄñL‚Äñ‚Çä * snorm (f) p Œº * snorm (g) q Œº := by
    apply lintegral_mul_le L hpq Œº (aestronglyMeasurable_iff_aemeasurable.mp
      (Lp.mem‚Ñíp f).aestronglyMeasurable) (aestronglyMeasurable_iff_aemeasurable.mp
        (Lp.mem‚Ñíp g).aestronglyMeasurable)

  gcongr
  apply mul_ne_top; apply mul_ne_top
  . exact Ne.symm top_ne_coe
  . exact snorm_ne_top f
  . exact snorm_ne_top g

section conj_q_lt_top'

def conj_q_lt_top' {q : ‚Ñù‚â•0‚àû} (g : Lp ‚Ñù q Œº) : Œ± ‚Üí ‚Ñù :=
  fun x => Real.sign (g x) * (ENNReal.rpow' (q.toReal-1) ‚Äñg x‚Äñ‚Çä).toReal

theorem lint_conj_q_lt_top'_mul_self (hq·µ¢ : q ‚â† ‚àû) {g : Lp ‚Ñù q Œº}
    : ‚à´‚Åª (x : Œ±), (conj_q_lt_top' g x).toNNReal * (g x).toNNReal ‚àÇŒº = ‚Äñg‚Äñ‚Çä ^ q.toReal := by
  unfold conj_q_lt_top'
  unfold ENNReal.rpow'
  -- Isn't this false e.g. if the function only has negative values the lhs is 0??? I'm confused
  conv =>
    lhs
    congr
    . rfl
    . intro x
      dsimp
      congr
      . congr
        rw [mul_comm, Real.toNNReal_mul, ENNReal.toNNReal_eq_toNNreal_of_toReal]
        . rw [ENNReal.coe_rpow_of_nonneg]
          . rw [ENNReal.toNNReal_coe]
            rfl
          . apply q_sub_one_nneg' (p := p) hq·µ¢
        . apply toReal_nonneg
      . rfl

  have hq' : q ‚â† 0 := by {
    symm
    apply ne_of_lt
    calc
    0 < 1 := by norm_num
    _ ‚â§ q := hq.out
  }
  simp only [ENNReal.coe_mul, nnnorm_coe_ennreal, snorm, hq', ‚ÜìreduceIte, hq·µ¢]
  rw[‚Üê MeasureTheory.lintegral_rpow_nnnorm_eq_rpow_snorm']
  ¬∑ apply MeasureTheory.lintegral_congr_ae
    filter_upwards with x
    sorry --not true?
  ¬∑ apply lt_of_le_of_ne
    ¬∑ simp
    ¬∑ symm
      rw[ENNReal.toReal_ne_zero]
      simp[hq', hq·µ¢]




theorem int_conj_q_lt_top'_mul_self (hq·µ¢ : q ‚â† ‚àû) {g : Lp ‚Ñù q Œº}
    : ‚Äñ‚à´ (x : Œ±), (conj_q_lt_top' g) x * g x ‚àÇŒº‚Äñ = ‚Äñg‚Äñ ^ q.toReal := by
  unfold conj_q_lt_top'
  unfold ENNReal.rpow'
  conv =>
    pattern _ * _
    rw [mul_assoc, mul_comm, mul_assoc]
    congr
    rfl
    rw [Real.self_mul_sign, ‚Üê nnnorm_toReal_eq_abs]
    rfl

  have hq' : q ‚â† 0 := by {
    symm
    apply ne_of_lt
    calc
    0 < 1 := by norm_num
    _ ‚â§ q := hq.out
  }

  rw[MeasureTheory.Lp.norm_def]
  simp only [ENNReal.rpow_eq_pow, coe_nnnorm, norm_eq_abs, snorm, hq', ‚ÜìreduceIte, hq·µ¢]
  have : (snorm' (‚Üë‚Üëg) q.toReal Œº).toReal ^ q.toReal = ((snorm' (‚Üë‚Üëg) q.toReal Œº) ^ q.toReal).toReal := by{
    sorry
  }

  rw[this, ‚Üê MeasureTheory.lintegral_rpow_nnnorm_eq_rpow_snorm']
  ¬∑ sorry
  ¬∑ apply lt_of_le_of_ne
    ¬∑ simp
    ¬∑ symm
      rw[ENNReal.toReal_ne_zero]
      simp[hq', hq·µ¢]


@[measurability]
theorem conj_q_lt_top'_aemeasurable (g : Lp ‚Ñù q Œº)
    : AEMeasurable (conj_q_lt_top' g) Œº := by
  apply AEMeasurable.mul <;> apply Measurable.comp_aemeasurable'
  . exact measurable_sign
  . exact (Lp.mem‚Ñíp g).aestronglyMeasurable.aemeasurable
  . exact ENNReal.measurable_toReal
  . exact Measurable.comp_aemeasurable' (ENNReal.measurable_rpow'_const _)
      (Measurable.comp_aemeasurable' (measurable_coe_nnreal_ennreal) (Measurable.comp_aemeasurable'
      (measurable_nnnorm) (Lp.mem‚Ñíp g).aestronglyMeasurable.aemeasurable))

@[measurability]
theorem conj_q_lt_top'_aestrongly_measurable (g : Lp ‚Ñù q Œº)
    : AEStronglyMeasurable (conj_q_lt_top' g) Œº := (aestronglyMeasurable_iff_aemeasurable (Œº := Œº)).mpr
  (conj_q_lt_top'_aemeasurable g)

theorem conj_q_lt_top'_of_ae_eq_zero (g : Lp ‚Ñù q Œº)
    (hg : g =·µê[Œº] 0) (hq‚ÇÅ : q > 1) (hq·µ¢ : q ‚â† ‚àû) : conj_q_lt_top' g =·µê[Œº] 0 := by
  apply ae_iff.mpr
  unfold conj_q_lt_top'
  simp_all
  apply measure_mono_null
  . show _ ‚äÜ {a | ¬¨g a = 0}; simp_all
  . exact ae_iff.mp hg

theorem conj_q_lt_top'_of_eq_zero (g : Lp ‚Ñù q Œº)
    (hg : g = 0) (hq‚ÇÅ : q > 1) (hq·µ¢ : q ‚â† ‚àû) : conj_q_lt_top' g =·µê[Œº] 0 := by
  have : g =·µê[Œº] 0 := eq_zero_iff_ae_eq_zero.mp hg
  exact conj_q_lt_top'_of_ae_eq_zero g this hq‚ÇÅ hq·µ¢

theorem conj_q_lt_top'_of_nnnorm_zero (g : Lp ‚Ñù q Œº)
    (hg : ‚Äñg‚Äñ‚Çä = 0) (hq‚ÇÅ : q > 1) (hq·µ¢ : q ‚â† ‚àû) : conj_q_lt_top' ‚Üëg =·µê[Œº] 0 := by
  have : g = 0 := (nnnorm_eq_zero_iff q_gt_zero).mp hg
  exact conj_q_lt_top'_of_eq_zero g this hq‚ÇÅ hq·µ¢

@[simp]
theorem snorm'_of_conj_q_lt_top' (hq·µ¢ : q ‚â† ‚àû) (g : Lp ‚Ñù q Œº)
    : snorm' (conj_q_lt_top' g) p.toReal Œº
    = (snorm' g q.toReal Œº) ^ (q.toReal - 1) := by
  unfold snorm'
  rw [‚ÜêENNReal.rpow_mul, ‚Üêq_div_p_add_one'' (q := q) (p := p) hq·µ¢]
  rw [‚Üêmul_div_right_comm (a := 1) (c := q.toReal)]
  rw [one_mul, div_div, div_mul_cancel_right‚ÇÄ (q_ne_zero' (p := p) hq·µ¢) (a := p.toReal)]
  rw [inv_eq_one_div]
  congr 1

  unfold conj_q_lt_top'
  unfold ENNReal.rpow'

  conv =>
    lhs
    pattern _ ^ _
    rw [nnnorm_mul, ENNReal.coe_mul, (ENNReal.mul_rpow_of_nonneg _ _ p_ge_zero')]
    congr
    rfl
    rw [ENNReal.coe_rpow_of_nonneg _ p_ge_zero']
    congr
    rw [‚ÜêReal.toNNReal_eq_nnnorm_of_nonneg toReal_nonneg]
    rw [toNNReal_eq_toNNreal_of_toReal, ENNReal.toNNReal_rpow]
    congr
    dsimp [ENNReal.rpow]
    rw [‚ÜêENNReal.rpow_mul]
    congr
    rfl
    rw [sub_mul (c := p.toReal), one_mul, mul_comm, ‚Üêp_add_q' hq·µ¢]
    rw [add_comm, add_sub_assoc, sub_self, add_zero]
    rfl

  conv =>
    lhs
    pattern _*_
    congr

    . rw [rpow_of_nnnorm_of_sign _ _ p_gt_zero']
      rfl

    . rw [ENNReal.coe_toNNReal]
      rfl
      apply ENNReal.rpow_of_to_ENNReal_of_NNReal_ne_top _ _ q_ge_zero'

  apply lintegral_congr_ae
  apply ae_iff.mpr
  simp_all only [ne_eq, ite_mul, _root_.nnnorm_zero, ENNReal.coe_zero, zero_mul, one_mul,
    ite_eq_right_iff, Classical.not_imp]

  conv =>
    lhs
    pattern _ ^ _
    rw [ENNReal.zero_rpow_of_pos (q_gt_zero' hq·µ¢)]
    rfl

  simp

@[simp]
theorem snorm_of_conj_q_lt_top' (hq·µ¢ : q ‚â† ‚àû) (g : Lp ‚Ñù q Œº)
    : snorm (conj_q_lt_top' g) p Œº = (snorm g q Œº) ^ (q.toReal - 1) := by
  rw [snorm_eq_snorm', snorm_eq_snorm']
  ¬∑ exact _root_.trans (snorm'_of_conj_q_lt_top' (p := p) (q := q) (hq·µ¢) g) rfl
  ¬∑ exact q_ne_zero (p := p)
  ¬∑ exact hq·µ¢
  ¬∑ exact p_ne_zero (q := q)
  ¬∑ exact p_ne_top

theorem Mem‚Ñíp_conj_q_lt_top' (hq·µ¢ : q ‚â† ‚àû) (g : Lp ‚Ñù q Œº)  : Mem‚Ñíp (conj_q_lt_top' g) p Œº := by
  constructor
  . measurability
  . rw [snorm_of_conj_q_lt_top' hq·µ¢ g]
    exact ENNReal.rpow_lt_top_of_nonneg (q_sub_one_nneg' (p := p) hq·µ¢) (snorm_ne_top g)

def conj_q_lt_top (hq·µ¢ : q ‚â† ‚àû) (g : Lp ‚Ñù q Œº) : Lp ‚Ñù p Œº :=
  toLp (conj_q_lt_top' g) (Mem‚Ñíp_conj_q_lt_top' hq·µ¢ g)

@[simp]
theorem snorm_of_conj_q_lt_top (hq·µ¢ : q ‚â† ‚àû) (g : Lp ‚Ñù q Œº)
    : snorm (conj_q_lt_top (p := p) hq·µ¢ g) p Œº = (snorm g q Œº) ^ (q.toReal - 1) := by
  apply _root_.trans
  ¬∑ exact snorm_congr_ae (coeFn_toLp _ )
  ¬∑ exact snorm_of_conj_q_lt_top' hq·µ¢ g

@[simp]
theorem norm_of_conj_q_lt_top (hq·µ¢ : q ‚â† ‚àû) (g : Lp ‚Ñù q Œº)
    : ‚Äñconj_q_lt_top (p := p) hq·µ¢ g‚Äñ = ‚Äñg‚Äñ ^ (q.toReal - 1) := by
  rw [norm_def, norm_def, ENNReal.toReal_rpow]
  congr
  exact snorm_of_conj_q_lt_top (p := p) hq·µ¢ g

theorem int_conj_q_lt_top_mul_self (hq·µ¢ : q ‚â† ‚àû) {g : Lp ‚Ñù q Œº}
    : ‚Äñ‚à´ (x : Œ±), (conj_q_lt_top (p := p) hq·µ¢ g) x * g x ‚àÇŒº‚Äñ = ‚Äñg‚Äñ := by
  sorry

end conj_q_lt_top'

section normalized_conj_q_lt_top'

def normalized_conj_q_lt_top' {q : ‚Ñù‚â•0‚àû} (g : Lp ‚Ñù q Œº) : Œ± ‚Üí ‚Ñù :=
  fun x ‚Ü¶ (conj_q_lt_top' g x) * (rpow' (1 - q.toReal) ‚Äñg‚Äñ‚Çä)

@[measurability]
theorem normalized_conj_q_lt_top'_ae_measurable (g : Lp ‚Ñù q Œº)
    : AEMeasurable (normalized_conj_q_lt_top' g) Œº := by
  unfold normalized_conj_q_lt_top'
  exact AEMeasurable.mul_const (conj_q_lt_top'_aemeasurable g) _

@[measurability]
theorem normalized_conj_q_lt_top'_aestrongly_measurable (g : Lp ‚Ñù q Œº)
    : AEStronglyMeasurable (normalized_conj_q_lt_top' g) Œº := by
  unfold normalized_conj_q_lt_top'
  exact (aestronglyMeasurable_iff_aemeasurable (Œº := Œº)).mpr
    (normalized_conj_q_lt_top'_ae_measurable g)

@[simp]
theorem snorm'_normalized_conj_q_lt_top' {g : Lp ‚Ñù q Œº} (hq·µ¢ : q ‚â† ‚àû) (hg : ‚Äñg‚Äñ‚Çä ‚â† 0)
    : snorm' (normalized_conj_q_lt_top' g) p.toReal Œº = 1 := by
  unfold normalized_conj_q_lt_top'
  rw [rpow', snorm'_mul_const p_gt_zero', snorm'_of_conj_q_lt_top' hq·µ¢, NNReal.rpow_eq_pow,
     coe_rpow, coe_nnnorm, ‚Üê snorm_eq_snorm', norm_def, ‚Üê neg_sub q.toReal]
  case hp_ne_zero => exact q_ne_zero (p := p)
  case hp_ne_top => exact hq·µ¢

  generalize hx : snorm g q Œº = x
  generalize hy : q.toReal - 1 = y

  have y_pos : y > 0 := by
    calc _ = q.toReal - 1 := by rw [hy]
         _ > 1 - 1        := by gcongr; exact q_gt_one' (p := p) hq·µ¢
         _ = 0            := by ring

  have y_nneg : y ‚â• 0 := by linarith[y_pos]

  have x_ne_top : x ‚â† ‚àû := hx ‚ñ∏ snorm_ne_top g

  have x_ne_zero : x ‚â† 0 := by
    calc _ = snorm g q Œº            := by rw [hx]
         _ = (snorm g q Œº).toNNReal := by symm; apply ENNReal.coe_toNNReal; rw [hx]; exact x_ne_top
         _ = ‚Äñg‚Äñ‚Çä                   := by rw [nnnorm_def]
         _ ‚â† 0                      := ENNReal.coe_ne_zero.mpr hg

  have x_rpow_y_ne_top : x^y ‚â† ‚àû := ENNReal.rpow_ne_top_of_nonneg y_nneg x_ne_top

  rw [‚Üê ENNReal.coe_toNNReal (a := x ^ y) x_rpow_y_ne_top,
     ENNReal.toReal_rpow,
     ENNReal.nnnorm_of_toReal_eq_toNNReal]
  norm_cast
  rw [‚Üê ENNReal.toNNReal_mul, ‚Üê ENNReal.one_toNNReal]
  congr
  rw [‚ÜêENNReal.rpow_add]
  . simp
  . exact x_ne_zero
  . exact x_ne_top

@[simp]
theorem snorm_normalized_conj_q_lt_top' (hq·µ¢ : q ‚â† ‚àû) {g : Lp ‚Ñù q Œº} (hg : ‚Äñg‚Äñ‚Çä ‚â† 0)
    : snorm (normalized_conj_q_lt_top' g) p Œº = 1 := by
  rw [snorm_eq_snorm']
  ¬∑ exact snorm'_normalized_conj_q_lt_top' hq·µ¢ hg
  ¬∑ exact p_ne_zero (q := q)
  ¬∑ exact p_ne_top (p := p)

theorem Mem‚Ñíp_normalized_conj_q_lt_top' (hq·µ¢ : q ‚â† ‚àû) {g : Lp ‚Ñù q Œº} (hg : ‚Äñg‚Äñ‚Çä ‚â† 0)
    : Mem‚Ñíp (normalized_conj_q_lt_top' g) p Œº := by
  refine ‚ü®normalized_conj_q_lt_top'_aestrongly_measurable g, ?_‚ü©
  rw [snorm_normalized_conj_q_lt_top' hq·µ¢ hg]
  trivial

def normalized_conj_q_lt_top (hq·µ¢ : q ‚â† ‚àû) {g : Lp ‚Ñù q Œº} (hg : ‚Äñg‚Äñ‚Çä ‚â† 0) : Lp ‚Ñù p Œº :=
  toLp (normalized_conj_q_lt_top' g) (Mem‚Ñíp_normalized_conj_q_lt_top' hq·µ¢ hg)

@[simp]
theorem snorm_normalized_conj_q_lt_top (hq·µ¢ : q ‚â† ‚àû) {g : Lp ‚Ñù q Œº} (hg : ‚Äñg‚Äñ‚Çä ‚â† 0)
    : snorm (normalized_conj_q_lt_top (p := p) hq·µ¢ hg) p Œº = 1 := by
  apply _root_.trans
  ¬∑ exact snorm_congr_ae (coeFn_toLp _)
  ¬∑ exact snorm_normalized_conj_q_lt_top' hq·µ¢ hg

@[simp]
theorem norm_of_normalized_conj_q_lt_top (hq·µ¢ : q ‚â† ‚àû) {g : Lp ‚Ñù q Œº} (hg : ‚Äñg‚Äñ‚Çä ‚â† 0)
    : ‚Äñnormalized_conj_q_lt_top (p := p) hq·µ¢ hg‚Äñ = 1 := by
  rw [norm_def, ‚ÜêENNReal.one_toReal]
  congr
  exact snorm_normalized_conj_q_lt_top (p := p) hq·µ¢ hg

theorem int_normalized_conj_q_lt_top_mul_self (hq·µ¢ : q ‚â† ‚àû) {g : Lp ‚Ñù q Œº} (hg : ‚Äñg‚Äñ‚Çä ‚â† 0)
    : ‚Äñ‚à´ (x : Œ±), (normalized_conj_q_lt_top (p := p) hq·µ¢ hg) x * g x ‚àÇŒº‚Äñ = ‚Äñg‚Äñ := by
  sorry

end normalized_conj_q_lt_top'

theorem snorm_eq_sup_abs'' {Œº : Measure Œ±} (hŒº : SigmaFinite Œº) (g : Lp ‚Ñù ‚àû Œº) :
    ‚Äñg‚Äñ = sSup ((fun f => ‚Äñ‚à´ x, (f x) * (g x) ‚àÇŒº‚Äñ) '' {(f : Lp ‚Ñù 1 Œº) | ‚Äñf‚Äñ ‚â§ 1}) := by
  -- we need Œº to be œÉ-finite
  sorry

theorem snorm_eq_sup_q_gt_top (g : Lp ‚Ñù q Œº) (hq·µ¢ : q ‚â† ‚àû) :
              ‚Äñg‚Äñ = sSup ((fun f => ‚Äñ‚à´ x, (f x) * (g x) ‚àÇŒº‚Äñ) '' {(f : Lp ‚Ñù p Œº) | ‚Äñf‚Äñ ‚â§ 1}) := by
  apply le_antisymm;
  . apply le_csSup
    . use ‚Äñg‚Äñ
      intro x hx
      rcases hx with ‚ü®f, hf, rfl‚ü©
      dsimp only [Set.mem_setOf_eq] at hf
      dsimp only
      calc _ ‚â§ ‚à´ x, ‚Äñf x * g x‚Äñ ‚àÇŒº             := by apply norm_integral_le_integral_norm
           _ = ‚à´ x, ‚Äñ(mul ‚Ñù ‚Ñù) (f x) (g x)‚Äñ ‚àÇŒº := by simp only [norm_mul, norm_eq_abs,
             mul_apply']
           _ ‚â§ ‚Äñ(mul ‚Ñù ‚Ñù)‚Äñ * ‚Äñf‚Äñ * ‚Äñg‚Äñ         := by apply integral_mul_le; exact hpq.out
           _ = ‚Äñf‚Äñ * ‚Äñg‚Äñ                       := by simp only [opNorm_mul, one_mul]
           _ ‚â§ 1 * ‚Äñg‚Äñ                         := by gcongr
           _ = ‚Äñg‚Äñ                             := by simp only [one_mul]
    . use normalized_conj_q_lt_top (p := p) hq·µ¢ (?_ : ‚Äñg‚Äñ‚Çä ‚â† 0)
      swap; sorry
      constructor
      . simp only [Set.mem_setOf_eq]
        rw [norm_of_normalized_conj_q_lt_top]
      . dsimp only
        exact int_normalized_conj_q_lt_top_mul_self (p := p) hq·µ¢ (?_ : ‚Äñg‚Äñ‚Çä ‚â† 0)

  . refine Real.sSup_le (fun x hx ‚Ü¶ ?_) (norm_nonneg _)
    rcases hx with ‚ü®f, hf, rfl‚ü©
    simp only [Set.mem_setOf_eq] at hf; dsimp only

    calc _ ‚â§ ‚à´ x, ‚Äñf x * g x‚Äñ ‚àÇŒº             := norm_integral_le_integral_norm _
         _ = ‚à´ x, ‚Äñ(mul ‚Ñù ‚Ñù) (f x) (g x)‚Äñ ‚àÇŒº := by simp only [norm_mul, norm_eq_abs, mul_apply']
         _ ‚â§ ‚Äñ(mul ‚Ñù ‚Ñù)‚Äñ * ‚Äñf‚Äñ * ‚Äñg‚Äñ         := by apply integral_mul_le; exact hpq.out
         _ = ‚Äñf‚Äñ * ‚Äñg‚Äñ                       := by rw [opNorm_mul, one_mul]
         _ ‚â§ 1 * ‚Äñg‚Äñ                         := by gcongr
         _ = ‚Äñg‚Äñ                             := by rw [one_mul]

variable (p q Œº) in
theorem snorm_eq_sup_abs (hŒº : SigmaFinite Œº) (g : Lp ‚Ñù q Œº):
              ‚Äñg‚Äñ = sSup ((fun f => ‚Äñ‚à´ x, (f x) * (g x) ‚àÇŒº‚Äñ) '' {(f : Lp ‚Ñù p Œº) | ‚Äñf‚Äñ ‚â§ 1}) := by

  by_cases hq·µ¢ : q ‚â† ‚ä§; swap
  . simp only [ne_eq, Decidable.not_not] at hq·µ¢
    have hp‚ÇÅ : p = 1 := by {
      rw [left_eq_one_iff, ‚Üê hq·µ¢]
      exact hpq.out
    }
    subst hq·µ¢; subst hp‚ÇÅ
    sorry
  . sorry


-- The following def takes 3.2 seconds
/- The map sending `g` to `f ‚Ü¶ ‚à´ x, L (g x) (f x) ‚àÇŒº` induces a map on `L^q` into
`Lp E‚ÇÇ p Œº ‚ÜíL[‚Ñù] E‚ÇÉ`. Generally we will take `E‚ÇÉ = ‚Ñù`. -/
variable (p Œº) in
def toDual (g : Lp E‚ÇÅ q Œº) : Lp E‚ÇÇ p Œº ‚ÜíL[‚Ñù] E‚ÇÉ := by{

  let F : Lp E‚ÇÇ p Œº ‚Üí E‚ÇÉ := fun f ‚Ü¶ ‚à´ x, L (g x) (f x) ‚àÇŒº

  have : IsBoundedLinearMap ‚Ñù F := by{
    exact {
      map_add := by{
        intro f‚ÇÅ f‚ÇÇ
        simp only [AddSubmonoid.coe_add, AddSubgroup.coe_toAddSubmonoid, F]
        rw [‚Üê integral_add]
        ¬∑ apply integral_congr_ae
          filter_upwards [coeFn_add f‚ÇÅ f‚ÇÇ] with a ha
          norm_cast
          rw [ha]
          simp only [Pi.add_apply, map_add]
        ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g) (Lp.mem‚Ñíp f‚ÇÅ)
        ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g) (Lp.mem‚Ñíp f‚ÇÇ)
        }

      map_smul := by{
        intro m f
        simp only [F]
        rw [‚Üê integral_smul]
        apply integral_congr_ae
        filter_upwards [coeFn_smul m f] with a ha
        rw [ha]
        simp only [Pi.smul_apply, LinearMapClass.map_smul]
        }

      bound := by{
        suffices henough : ‚àÉ M, ‚àÄ (x : ‚Ü•(Lp E‚ÇÇ p Œº)), ‚ÄñF x‚Äñ ‚â§ M * ‚Äñx‚Äñ from ?_
        . let ‚ü®M, hM‚ü© := henough; clear henough

          by_cases hM_le_zero : M ‚â§ 0
          . use 1; constructor; linarith; intro f
            calc ‚ÄñF f‚Äñ ‚â§ M * ‚Äñf‚Äñ := hM f
                 _     ‚â§ 1 * ‚Äñf‚Äñ := by apply mul_le_mul_of_nonneg_right; linarith
                                       apply norm_nonneg
          . simp only [not_le] at hM_le_zero; use M

        simp only [F]
        use ‚ÄñL‚Äñ * ‚Äñg‚Äñ
        intro f
        calc ‚Äñ‚à´ (x : Œ±), (L (g x)) (f x) ‚àÇŒº‚Äñ ‚â§ ‚à´ (x : Œ±), ‚ÄñL (g x) (f x)‚Äñ ‚àÇŒº := by apply norm_integral_le_integral_norm
             _ ‚â§ ‚ÄñL‚Äñ * ‚Äñg‚Äñ * ‚Äñf‚Äñ := ?_

        apply integral_mul_le L hpq.out.symm
      }
    }
  }

  apply IsBoundedLinearMap.toContinuousLinearMap this
}



-- NOTE: SO ARE WE JUST TAKING L TO BE THE PRODUCT FROM NOW ON?
-- The assumptions making L' into the product were added previously, I added hŒº

--3 seconds. Half a second wasted on typeclass inferences

variable (L' : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù) (L'mul : ‚àÄ x y, L' x y = x * y) (L'norm_one : ‚ÄñL'‚Äñ = 1)
  (hŒº: SigmaFinite Œº) (f : Lp ‚Ñù p Œº) (g : Lp ‚Ñù q Œº) (N:‚Ñù) (Nnneg: N ‚â• 0) in
lemma toDual_bound (hbound: ‚àÄ (x : ‚Ü•(Lp ‚Ñù p Œº)), ‚Äñ(toDual p Œº L' g) x‚Äñ ‚â§ N * ‚Äñx‚Äñ ) : ‚Äñg‚Äñ ‚â§ N := by{
  rw[snorm_eq_sup_abs p q Œº hŒº g]
  apply csSup_le
  ¬∑ apply Set.Nonempty.image
    use 0
    simp only [Set.mem_setOf_eq, _root_.norm_zero, zero_le_one]
  ¬∑ intro x hx
    obtain ‚ü®f, hf‚ÇÅ, hf‚ÇÇ‚ü© := hx
    simp only [Set.mem_setOf_eq] at hf‚ÇÅ
    simp only [norm_eq_abs] at hf‚ÇÇ
    specialize hbound f
    rw[‚Üê hf‚ÇÇ]
    have : (toDual p Œº L' g) f = ‚à´ (x : Œ±), L' (g x) (f x) ‚àÇŒº := rfl
    rw[this] at hbound
    conv in f _ * g _ => rw[mul_comm]
    simp_rw[L'mul] at hbound
    calc
    |‚à´ (x : Œ±), g x * f x ‚àÇŒº| ‚â§ N * ‚Äñf‚Äñ := hbound
    _ ‚â§ N := by nth_rewrite 2 [‚Üê mul_one N]; gcongr
}

--2.6 seconds
variable (L' : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù) (L'norm_one : ‚ÄñL'‚Äñ = 1)
  (f : Lp ‚Ñù p Œº) (g : Lp ‚Ñù q Œº) in
lemma toDual_norm : ‚Äñ(toDual p Œº L' g) f‚Äñ ‚â§ ‚Äñg‚Äñ * ‚Äñf‚Äñ := by{
  calc ‚Äñ(toDual p Œº L' g) f‚Äñ ‚â§ ‚à´ x, ‚ÄñL' (g x) (f x)‚Äñ ‚àÇŒº := by apply norm_integral_le_integral_norm
  _ ‚â§ ‚ÄñL'‚Äñ * ‚Äñg‚Äñ * ‚Äñf‚Äñ := by apply integral_mul_le L' hpq.out.symm
  _ = ‚Äñg‚Äñ * ‚Äñf‚Äñ := by simp only [L'norm_one, one_mul]
}

-- Lots of things take lots of time here, even the `simp only`s

/- The map sending `g` to `f ‚Ü¶ ‚à´ x, (f x) * (g x) ‚àÇŒº` is a linear isometry. -/
variable (L' : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù) (L'mul : ‚àÄ x y, L' x y = x * y) (L'norm_one : ‚ÄñL'‚Äñ = 1)
  (hŒº: SigmaFinite Œº) in
def toDual‚Çó·µ¢' : Lp ‚Ñù q Œº ‚Üí‚Çó·µ¢[‚Ñù] Lp ‚Ñù p Œº ‚ÜíL[‚Ñù] ‚Ñù where
  toFun := toDual _ _ L'
  map_add':= by{
    intro g‚ÇÅ g‚ÇÇ
    simp only [toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap,
      AddSubmonoid.coe_add, AddSubgroup.coe_toAddSubmonoid]
    ext f
    simp only [coe_mk', IsLinearMap.mk'_apply, add_apply]
    rw [‚Üê integral_add]
    ¬∑ apply integral_congr_ae
      filter_upwards [coeFn_add g‚ÇÅ g‚ÇÇ] with a ha
      norm_cast
      rw [ha]
      simp only [Pi.add_apply, map_add, add_apply]
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L' hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÅ) (Lp.mem‚Ñíp f)
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L' hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÇ) (Lp.mem‚Ñíp f)
  }
  map_smul':= by{
    intro m g
    simp only [toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap,
      RingHom.id_apply]
    ext f
    simp only [coe_mk', IsLinearMap.mk'_apply, coe_smul', Pi.smul_apply, smul_eq_mul]
    rw [‚Üê integral_mul_left] -- mul vs smul
    apply integral_congr_ae
    filter_upwards [coeFn_smul m g] with a ha
    rw [ha]
    simp only [Pi.smul_apply, smul_eq_mul, L'mul]; ring
  }
  norm_map' := by {
    intro g
    conv_lhs => simp [Norm.norm] -- is this simp okay or is there a risk this gets converted to something else if simp rules change? How do we deal with simps in conv?
    apply ContinuousLinearMap.opNorm_eq_of_bounds
    . simp only [norm_nonneg]
    . intro f
      apply toDual_norm
      exact L'norm_one
    . intro N Nnneg
      intro hbound
      apply toDual_bound L' L'mul hŒº g N Nnneg hbound
  }


--See above. 5.6 seconds
-- I AM ADDING THE SAME HYPOTHESES AS ABOVE DOWN HERE. Namely, every space becomes ‚Ñù and any bilinear map becomes a product
/- The map sending `g` to `f ‚Ü¶ ‚à´ x, (f x) * (g x) ‚àÇŒº` is a linear isometry. -/
variable (p q Œº) (L' : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù) (L'mul : ‚àÄ x y, L' x y = x * y) (L'norm_one : ‚ÄñL'‚Äñ = 1)
  (hŒº: SigmaFinite Œº) in
def toDual‚Çó·µ¢ : Lp ‚Ñù q Œº ‚Üí‚Çó·µ¢[‚Ñù] Lp ‚Ñù p Œº ‚ÜíL[‚Ñù] ‚Ñù  where

  toFun := toDual _ _ L'
  map_add':= by{
    intro g‚ÇÅ g‚ÇÇ
    simp only [toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap,
      AddSubmonoid.coe_add, AddSubgroup.coe_toAddSubmonoid]
    ext f
    simp only [coe_mk', IsLinearMap.mk'_apply, add_apply]
    rw [‚Üê integral_add]
    ¬∑ apply integral_congr_ae
      filter_upwards [coeFn_add g‚ÇÅ g‚ÇÇ] with a ha
      norm_cast
      rw [ha]
      simp only [Pi.add_apply, map_add, add_apply]
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L' hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÅ) (Lp.mem‚Ñíp f)
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L' hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÇ) (Lp.mem‚Ñíp f)
  }
  map_smul':= by{
    intro m g
    simp only [toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap,
      RingHom.id_apply]
    ext f
    simp only [coe_mk', IsLinearMap.mk'_apply, coe_smul', Pi.smul_apply]
    rw [‚Üê integral_smul]
    apply integral_congr_ae
    filter_upwards [coeFn_smul m g] with a ha
    rw [ha]
    simp only [Pi.smul_apply, smul_eq_mul, L'mul, mul_assoc]
  }
  norm_map' := by {
    intro g
    simp only [LinearMap.coe_mk, AddHom.coe_mk]
    conv_lhs => simp[Norm.norm]
    apply ContinuousLinearMap.opNorm_eq_of_bounds
    ¬∑ simp only [norm_nonneg]
    ¬∑ intro f
      apply toDual_norm
      exact L'norm_one
    ¬∑ intro N Nnneg
      intro hbound
      apply toDual_bound L' L'mul hŒº g N Nnneg hbound
  }

/- The map sending `g` to `f ‚Ü¶ ‚à´ x, L (f x) (g x) ‚àÇŒº` is a linear isometric equivalence.  -/
variable (p q Œº) in
def dualIsometry (L : E‚ÇÅ ‚ÜíL[‚Ñù] Dual ‚Ñù E‚ÇÇ) :
    Dual ‚Ñù (Lp E‚ÇÇ p Œº) ‚âÉ‚Çó·µ¢[‚Ñù] Lp E q Œº :=
  sorry

end Lp
end MeasureTheory

end
